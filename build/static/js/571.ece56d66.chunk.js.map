{"version":3,"file":"static/js/571.ece56d66.chunk.js","mappings":"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","sources":["sections/one/view.js","pages/dashboard/one.js","../node_modules/@mui/icons-material/Delete.js","../node_modules/@mui/material/DialogTitle/DialogTitle.js"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\r\n// @mui\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\n// components\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport { Button, Chip, Stack, Box, TextField, InputAdornment, Modal, Grid, IconButton, Autocomplete, Select, FormControl, InputLabel, MenuItem, Menu, Dialog, DialogActions, DialogTitle, DialogContent, ListItemText } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport dayjs from 'dayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport DataTable from 'react-data-table-component';\r\nimport { DatePicker } from '@mui/x-date-pickers';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport PercentIcon from '@mui/icons-material/Percent';\r\nimport { color, common, decryptToken, formatDate, formatObj } from 'src/utils/common';\r\nimport { constants } from 'src/utils/constant';\r\nimport axios, { endpoints } from 'src/utils/axios';\r\nimport { useSnackbar } from 'src/components/snackbar';\r\nimport { useAuthContext } from 'src/auth/hooks';\r\nimport JsPDF from 'jspdf';\r\n\r\n// How i can know that dark mode\r\n\r\n// \r\n// ----------------------------------------------------------------------\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: '75%',\r\n  bgcolor: color.modalbackground,\r\n  borderRadius: '10px',\r\n  height: \"90%\",\r\n  overflowY: 'auto',\r\n  boxShadow: 24,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"space-between\",\r\n  gap: '10px',\r\n  p: 2,\r\n};\r\nconst styleForRecordPayment = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: '400px',\r\n  bgcolor: color.modalbackground,\r\n  borderRadius: '10px',\r\n  height: \"auto\",\r\n  boxShadow: 24,\r\n  p: 2,\r\n};\r\n\r\nconst initialSaleState = {\r\n  customer: '',\r\n  mobileNumber: '',\r\n  salesMan: null,\r\n  invoiceDate: null,\r\n  invoiceDueDate: null,\r\n  products: [],\r\n  offer: '',\r\n  amountToPay: '',\r\n  totalAmount: 0,\r\n  productDiscount: 0,\r\n  paymentMode: '',\r\n  paymentStatus: '',\r\n  bank: '',\r\n  multipleMode: {\r\n    cash: '',\r\n    upi: '',\r\n    cheque: '',\r\n    card: ''\r\n  }\r\n};\r\n\r\nconst initialSaleProduct = {\r\n  category: 'All Categories',\r\n  product: null,\r\n  quantity: '',\r\n  netAmount: null,\r\n  discount: null,\r\n  sellingPrice: null,\r\n};\r\n\r\nconst initialRecordPaymentState = {\r\n  salesOrderId: '',\r\n  name: '',\r\n  balance: 0,\r\n  amountToPay: 0,\r\n  paymentMode: '',\r\n  bank: '',\r\n  paymentDate: dayjs(new Date()),\r\n};\r\n\r\nexport default function SalesView() {\r\n  const settings = useSettingsContext();\r\n  // Create a ref for the Autocomplete component\r\n  const autocompleteRef = useRef(null);\r\n  const { user } = useAuthContext();\r\n  // State to store the index of the last added product\r\n  const [discount, setDiscount] = useState(0);\r\n  const [previouslyPaidAmount, setPreviouslyPaidAmount] = useState(0);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => {\r\n    setSales((prev) => ({ ...prev, invoiceDate: dayjs(new Date()) }))\r\n    setOpen(true);\r\n    setEditSales(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setEditSales(false);\r\n    handleClearAllStates();\r\n  };\r\n\r\n  const handleClearAllStates = () => {\r\n    setSales(initialSaleState);\r\n    setSaleProduct(initialSaleProduct);\r\n    setSales((prev) => ({ ...prev, customer: null }));\r\n    setDiscount(0);\r\n    setPreviouslyPaidAmount(0);\r\n  };\r\n\r\n  // For Delete Customer\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const [customers, setCustomers] = useState([]);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [banks, setBanks] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const [offers, setOffers] = useState([]);\r\n  const [sales, setSales] = useState(initialSaleState);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [saleProduct, setSaleProduct] = useState(initialSaleProduct)\r\n  const [isSalesLoading, setIsSalesLoading] = useState(false)\r\n  const [salesList, setSalesList] = useState([])\r\n  const [tempList, setTempList] = useState([])\r\n  const [salesSummary, setSaleSummary] = useState({\r\n    totalSalesAmount: 0,\r\n    totalPaidAmount: 0,\r\n    pendingAmount: 0\r\n  })\r\n\r\n  // For Actions Dropdown\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const openMenu = Boolean(anchorEl);\r\n  // Temporary State\r\n  const [tempData, setTempData] = useState({});\r\n\r\n\r\n  // RECORD PAYMENTS\r\n\r\n  const [recordPaymentModal, setRecordPaymentModal] = useState(false);\r\n  const [recordPayment, setRecordPayment] = useState(initialRecordPaymentState);\r\n  const [editSales, setEditSales] = useState(false);\r\n\r\n\r\n  const handleOpenRecordPaymentModal = () => {\r\n    setAnchorEl(null);\r\n    setRecordPaymentModal(true);\r\n    setRecordPayment((prev) => ({\r\n      ...prev, name: tempData.customerId.name,\r\n      balance: tempData.remainingAmount,\r\n      salesOrderId: tempData._id\r\n    }));\r\n    setTempData({});\r\n  }\r\n\r\n  const handleRecordPayment = () => {\r\n    const recordPaymentPayload = {};\r\n\r\n    recordPaymentPayload.salesOrderId = recordPayment.salesOrderId;\r\n    recordPaymentPayload.amountToPay = recordPayment.amountToPay;\r\n    recordPaymentPayload.paymentDate = recordPayment.paymentDate;\r\n    recordPaymentPayload.paymentMode = recordPayment.paymentMode;\r\n    if (recordPayment.bank.length > 0) {\r\n      recordPaymentPayload.bank = recordPayment.bank;\r\n    };\r\n\r\n    // If no errors, proceed with saving\r\n    const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n    const accessToken = decryptToken(decryptedToken);\r\n    axios.post(endpoints.sales.recordPayment, recordPaymentPayload,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      })\r\n      .then((res) => {\r\n        enqueueSnackbar('Sales order payment recorded successfully!', { variant: 'success' });\r\n        setRecordPaymentModal(false);\r\n        setRecordPayment(initialRecordPaymentState);\r\n        fetchSales();\r\n        fetchSaleSummary();\r\n      }).catch((err) => {\r\n        enqueueSnackbar(err.error, { variant: 'error' });\r\n      })\r\n\r\n  }\r\n\r\n  const fetchCustomers = async () => {\r\n\r\n    try {\r\n      const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n      const accessToken = decryptToken(decryptedToken);\r\n      const response = await axios.post(endpoints.customer.list, {}, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      });\r\n      if (response) {\r\n        setCustomers(response.data.data);\r\n      }\r\n    } catch (err) {\r\n      enqueueSnackbar('Failed to fetch customers!', { variant: 'error' });\r\n    }\r\n  };\r\n\r\n\r\n  const fetchEmployeesData = async () => {\r\n    try {\r\n      const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n      const accessToken = decryptToken(decryptedToken);\r\n      const response = await axios.post(endpoints.employee.list, {}, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      });\r\n      if (response) {\r\n        setEmployees(response.data.data);\r\n      }\r\n    } catch (err) {\r\n      enqueueSnackbar('Failed to fetch employees!', { variant: 'error' });\r\n    }\r\n  };\r\n\r\n  const fetchProducts = async () => {\r\n\r\n    try {\r\n      const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n      const accessToken = decryptToken(decryptedToken);\r\n      const response = await axios.post(endpoints.productBarcodeValues.list, {}, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      });\r\n      if (response) {\r\n        setProducts(response.data.data);\r\n      }\r\n    } catch (err) {\r\n      enqueueSnackbar('Failed to fetch products!', { variant: 'error' });\r\n    }\r\n  };\r\n\r\n\r\n  const fetchProductsCategory = async () => {\r\n\r\n    try {\r\n      const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n      const accessToken = decryptToken(decryptedToken);\r\n      const response = await axios.post(endpoints.product.category.list, {}, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      });\r\n      if (response) {\r\n        setCategories(response.data.data);\r\n      }\r\n    } catch (err) {\r\n      enqueueSnackbar('Failed to fetch Categories!', { variant: 'error' });\r\n    }\r\n  };\r\n\r\n\r\n  const fetchOffers = async () => {\r\n\r\n    try {\r\n      const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n      const accessToken = decryptToken(decryptedToken);\r\n      const response = await axios.post(endpoints.offer.list, { status: ['LIVE'] }, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      });\r\n      if (response) {\r\n        setOffers(response.data.data);\r\n      }\r\n    } catch (err) {\r\n      enqueueSnackbar('Failed to fetch offers!', { variant: 'error' });\r\n    }\r\n  };\r\n\r\n\r\n  const fetchSales = async () => {\r\n\r\n    try {\r\n      const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n      const accessToken = decryptToken(decryptedToken);\r\n      const response = await axios.post(endpoints.sales.list, {}, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      });\r\n      if (response) {\r\n        setIsSalesLoading(false);\r\n        setSalesList(response.data.data);\r\n        setTempList(response.data.data);\r\n      }\r\n    } catch (err) {\r\n      enqueueSnackbar('Failed to fetch sales orders!', { variant: 'error' });\r\n      setIsSalesLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchBanks = async () => {\r\n\r\n    try {\r\n      const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n      const accessToken = decryptToken(decryptedToken);\r\n      const response = await axios.post(endpoints.bank.list, {}, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      });\r\n      if (response) {\r\n        setBanks(response.data.data);\r\n      }\r\n    } catch (err) {\r\n      enqueueSnackbar('Failed to fetch bank accounts!', { variant: 'error' });\r\n    }\r\n  };\r\n\r\n  const fetchSaleSummary = async () => {\r\n\r\n    try {\r\n      const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n      const accessToken = decryptToken(decryptedToken);\r\n      const response = await axios.get(endpoints.sales.summary, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      });\r\n      if (response) {\r\n        setSaleSummary({\r\n          totalSalesAmount: response.data.data.totalSalesAmount,\r\n          totalPaidAmount: response.data.data.totalPaidAmount,\r\n          pendingAmount: response.data.data.pendingAmount\r\n        })\r\n      }\r\n    } catch (err) {\r\n      enqueueSnackbar('Failed to fetch bank accounts!', { variant: 'error' });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsSalesLoading(true);\r\n    fetchSales();\r\n    fetchSaleSummary();\r\n    fetchCustomers();\r\n    fetchEmployeesData();\r\n    fetchProducts();\r\n    // fetchProductsCategory();\r\n    fetchOffers();\r\n    fetchBanks();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n\r\n\r\n\r\n\r\n  const columns = [\r\n    {\r\n      name: 'Invoice Number',\r\n      selector: row => row.invoiceNumber,\r\n    },\r\n    {\r\n      name: 'Customer Name',\r\n      selector: row => row.customerId.name,\r\n      sortable: 'true',\r\n      width: '140px',\r\n    },\r\n    {\r\n      name: 'Sales Man Name',\r\n      selector: row => row.salesManId.name,\r\n      sortable: 'true',\r\n      width: '160px',\r\n    },\r\n    {\r\n      name: 'Product Name',\r\n      selector: row => row.products.length > 1 ? `${row.products[0].name}, & ${row.products.length - 1} more` : row.products[0].name,\r\n      width: '190px',\r\n    },\r\n    {\r\n      name: 'Amount',\r\n      selector: row => row.totalAmount.toFixed(2),\r\n      sortable: 'true',\r\n    },\r\n    {\r\n      name: 'Payment Mode',\r\n      selector: row => row.payments[0].paymentID.paymentMode,\r\n      sortable: 'true',\r\n    },\r\n    {\r\n      name: 'Payment Status',\r\n      selector: row => row.paymentStatus,\r\n      sortable: 'true',\r\n    },\r\n    {\r\n      name: 'Voucher Amount',\r\n      width: \"120px\",\r\n      selector: row => row.discount.amount === 0 ? 'N/A' : row.discount.amount.toFixed(2),\r\n    },\r\n    {\r\n      name: 'Actions',\r\n      width: \"130px\",\r\n      cell: (row) => (\r\n        <>\r\n          <Button\r\n            disabled={!user?.permissions?.sales?.u}\r\n            onClick={(event) => {\r\n              setAnchorEl(event.currentTarget);\r\n              setTempData(row)\r\n            }} style={{ color: color.actionButton }} variant='outlined' endIcon={<ArrowDropDownIcon />}>Action</Button>\r\n          <Menu\r\n            id=\"basic-menu\"\r\n            anchorEl={anchorEl}\r\n            open={openMenu}\r\n            onClose={() => {\r\n              setAnchorEl(null);\r\n              setTempData({});\r\n            }}\r\n            MenuListProps={{\r\n              'aria-labelledby': 'basic-button',\r\n            }}\r\n          >\r\n            {/* <MenuItem onClick={handleEdit}>Edit</MenuItem> */}\r\n            <MenuItem onClick={() => { }}>Send via Email</MenuItem>\r\n            <MenuItem onClick={() => { }}>Send via Whatsapp</MenuItem>\r\n            <MenuItem onClick={() => {\r\n              setOpenDialog(true);\r\n              setAnchorEl(null);\r\n            }}>Delete</MenuItem>\r\n            <MenuItem onClick={() => {\r\n              // setAnchorEl(null);\r\n              // // const doc = new JsPDF();\r\n              // // doc.text('Sales Report', 10, 10);\r\n\r\n              // // Get table data\r\n              // // Transform data and create tableData array\r\n              // const tableData = tempData;\r\n              // console.log(\"🚀 ~ SalesView ~ tableData:\", tableData)\r\n\r\n              // // // Set column headers\r\n              // // const headers = ['Customer Name', 'Sales Man Name', 'Product Name', 'Amount', 'Payment Mode','Payment Status','Invoice Number','Voucher Amount',];\r\n\r\n              // // // Add table to PDF\r\n              // // doc.autoTable({\r\n              // //   head: [headers],\r\n              // //   body: tableData,\r\n              // // });\r\n\r\n              // // doc.save('sales_order.pdf');\r\n              // setTempData(null);\r\n            }}>Print</MenuItem>\r\n            {\r\n              tempData.remainingAmount > 0 &&\r\n              <MenuItem onClick={() => handleOpenRecordPaymentModal()}>Record Payment</MenuItem>\r\n            }\r\n          </Menu>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const handleDeleteProduct = (row, index) => {\r\n    console.log('deleting product...', editSales);\r\n    if (editSales) {\r\n      setSales((prev) => ({ ...prev, offer: {} }))\r\n    }\r\n    const newProducts = [...sales.products];\r\n    newProducts.splice(index, 1);\r\n    setSales((prev) => ({ ...prev, products: newProducts }));\r\n  };\r\n\r\n  const handleProductChange = (index, field, fieldValue) => {\r\n\r\n    if (field === 'discount') {\r\n      if (fieldValue > sales.products[index].product.sellingPrice) {\r\n        fieldValue = sales.products[index].product.sellingPrice;\r\n        enqueueSnackbar(`Discount should not be greater than ${sales.products[index].product.sellingPrice}.`, { variant: 'error' })\r\n      }\r\n    };\r\n\r\n\r\n    // Check for quantity field as well\r\n    if (field === 'quantity') {\r\n      if (fieldValue > sales.products[index].product.quantity) {\r\n        fieldValue = sales.products[index].product.quantity;\r\n        enqueueSnackbar(`There are only ${sales.products[index].product.quantity} units available.`, { variant: 'error' })\r\n      };\r\n\r\n    };\r\n\r\n    // Create a copy of the products array\r\n    const updatedProducts = [...sales.products];\r\n\r\n    // Access the specific product by index\r\n    const product = { ...updatedProducts[index] };\r\n\r\n    // Update the field with the new value\r\n    product[field] = fieldValue;\r\n\r\n    // Update the products array with the modified product\r\n    updatedProducts[index] = product;\r\n\r\n    console.log(\"new Product\", updatedProducts[index]);\r\n\r\n\r\n    // Update the state immutably\r\n    setSales(prevSales => ({\r\n      ...prevSales,\r\n      products: updatedProducts\r\n    }));\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    setAnchorEl(null);\r\n    setDiscount(tempData.discount.amount);\r\n    setPreviouslyPaidAmount(tempData.totalAmount - tempData.remainingAmount);\r\n\r\n    const previousProducts = tempData.products.map((product) => {\r\n      const actualProduct = products.find((prod) => prod.name === product.name);\r\n      return {\r\n        product: actualProduct,\r\n        quantity: product.quantity,\r\n        sellingPrice: product.sellingPrice,\r\n        discount: product.discount\r\n      }\r\n    })\r\n    console.log(\"🚀 ~ previousProducts ~ previousProducts:\", previousProducts)\r\n    setSales(prevSales => ({\r\n      ...prevSales,\r\n      customer: tempData.customerId.name,\r\n      mobileNumber: customers.find((customer) => customer.mobileNumber === tempData.customerId.mobileNumber),\r\n      salesMan: tempData.salesManId,\r\n      invoiceDate: dayjs(tempData.invoiceDate),\r\n      invoiceDueDate: dayjs(tempData.invoiceDueDate),\r\n      products: previousProducts,\r\n      // amountToPay: tempData.remainingAmount,\r\n      // totalAmount: tempData.totalAmount,\r\n      paymentMode: tempData.payments[tempData.payments.length - 1].paymentID.paymentMode,\r\n      paymentStatus: tempData.paymentStatus,\r\n      // bank: tempData.payments[0].paymentID.bank,\r\n      ...(tempData?.discount?.offer && { offer: tempData.discount.offer.id }) // Conditionally add the offer object\r\n    }));\r\n    setEditSales(true);\r\n    setOpen(true);\r\n  }\r\n\r\n  const handleConfirmDelete = () => {\r\n\r\n    const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n    const accessToken = decryptToken(decryptedToken);\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    };\r\n    axios.post(endpoints.sales.delete, { id: tempData._id }, config)\r\n      .then((res) => {\r\n        if (res) {\r\n          enqueueSnackbar('Sales order deleted successfully!', { variant: 'success' });\r\n          setOpenDialog(false);\r\n          setTempData({});\r\n          fetchSales();\r\n          fetchSaleSummary();\r\n        };\r\n      }).catch((err) => {\r\n        console.log(err)\r\n        enqueueSnackbar(err.msg || err.error, { variant: 'error' });\r\n      })\r\n  };\r\n\r\n  const productColumns = [\r\n    {\r\n      name: 'Product Name',\r\n      selector: row => row?.product?.name ?? row.name,\r\n\r\n    },\r\n    {\r\n      name: 'Quantity',\r\n      selector: row => row.quantity,\r\n      cell: (row, index) => (\r\n        <TextField\r\n          autoFocus={index === (sales.products.length - 1)}\r\n          // disabled={editSales}\r\n          type='number'\r\n          onBlur={(e) => {\r\n            // Create a copy of the products array\r\n            const updatedProducts = [...sales.products];\r\n\r\n            // Access the specific product by index\r\n            const product = { ...updatedProducts[index] };\r\n\r\n            if (!row.quantity || parseInt(row.quantity, 10) === '0') {\r\n              enqueueSnackbar(`Quantity cannot be empty`, { variant: 'error' });\r\n              product.quantity = '1';\r\n              // Update the products array with the modified product\r\n              updatedProducts[index] = product;\r\n\r\n              // Update the state immutably\r\n              setSales(prevSales => ({\r\n                ...prevSales,\r\n                products: updatedProducts\r\n              }));\r\n            }\r\n          }}\r\n          onChange={(e) => handleProductChange(index, 'quantity', e.target.value)}\r\n          value={row.quantity}\r\n          size='small'\r\n        />\r\n      ),\r\n      center: 'true'\r\n    },\r\n    {\r\n      name: 'Sell Price',\r\n      selector: row => row.sellingPrice,\r\n      cell: (row, index) => (\r\n        <TextField\r\n          type='number'\r\n          // disabled={editSales}\r\n          onBlur={() => {\r\n            // Create a copy of the products array\r\n            const updatedProducts = [...sales.products];\r\n\r\n            // Access the specific product by index\r\n            const product = { ...updatedProducts[index] };\r\n\r\n            const productBarcodePrice = product.barcodePurchasePrice;\r\n            if (!row.sellingPrice || productBarcodePrice > parseInt(row.sellingPrice, 10)) {\r\n              enqueueSnackbar(`The product price cannot be lower than its purchase price of ${format(productBarcodePrice)}`, { variant: 'error' })\r\n              // Update the field with the new value\r\n              product.sellingPrice = String(productBarcodePrice);\r\n\r\n              // Update the products array with the modified product\r\n              updatedProducts[index] = product;\r\n\r\n              // Update the state immutably\r\n              setSales(prevSales => ({\r\n                ...prevSales,\r\n                products: updatedProducts\r\n              }));\r\n            }\r\n          }}\r\n          onChange={(e) => handleProductChange(index, 'sellingPrice', e.target.value)}\r\n          value={row.sellingPrice}\r\n          size='small' />\r\n      ),\r\n      center: 'true'\r\n    },\r\n    {\r\n      name: 'SGST',\r\n      selector: row => row?.sgst,\r\n      cell: (row, index) => (\r\n        <TextField\r\n          type='number'\r\n          disabled={editSales || row.igst}\r\n          onChange={(e) => handleProductChange(index, 'sellingPrice', e.target.value)}\r\n          value={row.sgst}\r\n          size='small' />\r\n      ),\r\n      center: 'true'\r\n    },\r\n    {\r\n      name: 'CGST',\r\n      selector: row => row?.cgst,\r\n      cell: (row, index) => (\r\n        <TextField\r\n          type='number'\r\n          disabled={editSales || row.igst}\r\n          onChange={(e) => handleProductChange(index, 'cgst', e.target.value)}\r\n          value={row.cgst}\r\n          size='small' />\r\n      ),\r\n      center: 'true'\r\n    },\r\n    {\r\n      name: 'IGST',\r\n      selector: row => row?.igst,\r\n      cell: (row, index) => (\r\n        <TextField\r\n          type='number'\r\n          disabled={editSales || row.sgst || row.cgst}\r\n          onChange={(e) => handleProductChange(index, 'igst', e.target.value)}\r\n          value={row.igst}\r\n          size='small' />\r\n      ),\r\n      center: 'true'\r\n    },\r\n    {\r\n      name: 'Discount',\r\n      selector: row => row.discount,\r\n      cell: (row, index) => (\r\n        <TextField value={row.discount}\r\n          size='small'\r\n          type='number'\r\n          onBlur={() => {\r\n            if (row.discount.length === 0) {\r\n              // Create a copy of the products array\r\n              const updatedProducts = [...sales.products];\r\n\r\n              // Access the specific product by index\r\n              const product = { ...updatedProducts[index] };\r\n\r\n              // Update the field with the new value\r\n              product.discount = '0';\r\n\r\n              // Update the products array with the modified product\r\n              updatedProducts[index] = product;\r\n\r\n              // Update the state immutably\r\n              setSales(prevSales => ({\r\n                ...prevSales,\r\n                products: updatedProducts\r\n              }));\r\n            }\r\n          }}\r\n          onChange={e => handleProductChange(index, 'discount', e.target.value)}\r\n        />\r\n      ),\r\n      center: 'true'\r\n    },\r\n    {\r\n      name: 'Net Amount',\r\n      selector: row => {\r\n        const quantity = parseInt(row.quantity || 0, 10); // Corrected parsing logic\r\n        const sellingPrice = parseInt(row.sellingPrice || 0, 10); // Corrected parsing logic\r\n        const netAmount = quantity * sellingPrice;\r\n        return netAmount;\r\n      },\r\n      center: 'true'\r\n    },\r\n    {\r\n      name: 'Actions',\r\n      cell: (row, index) => (\r\n        <IconButton\r\n          // disabled={editSales}\r\n          onClick={() => handleDeleteProduct(row, index)} color='error' variant='outlined'>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      ),\r\n      center: 'true'\r\n    },\r\n  ];\r\n\r\n  const { format } = new Intl.NumberFormat('hi-In', {\r\n    style: 'currency',\r\n    currency: 'INR'\r\n  });\r\n\r\n  const addProductToSales = (newValue) => {\r\n\r\n    // Check if the product is already added to sales\r\n    // if (sales.products.find((product) => product.name === newValue.productId.name)) {\r\n    //   enqueueSnackbar('Product already added!', { variant: 'error' });\r\n    //   return;\r\n    // }\r\n\r\n    // Check if product quantity is available\r\n    const existingProduct = products.find((barcode) => barcode.productId.name === newValue.productId.name);\r\n    if (existingProduct && existingProduct.productId.quantity < newValue.productId.quantity) {\r\n      enqueueSnackbar('Product quantity not available!', { variant: 'error' });\r\n      return;\r\n    }\r\n\r\n    // Add product to sales\r\n    const productToAdd = {\r\n      name: newValue.productId.name,\r\n      sellingPrice: newValue.productId.sellingPrice || '',\r\n      quantity: 1,\r\n      discount: 0, // In percentage\r\n      sgst: newValue?.productId?.sgst || 0, // In percentage\r\n      cgst: newValue?.productId?.cgst || 0, // In percentage\r\n      igst: newValue?.productId?.igst || 0, // In percentage\r\n      product: newValue.productId,\r\n      barcodePurchasePrice: newValue.purchasePrice,\r\n    };\r\n\r\n    setSales((prev) => ({\r\n      ...prev,\r\n      products: [...prev.products, productToAdd]\r\n    }));\r\n\r\n    setSaleProduct(initialSaleProduct);\r\n    if (autocompleteRef.current) {\r\n      autocompleteRef.current.blur();\r\n    };\r\n  };\r\n\r\n  // Function to calculate the discount\r\n  function calculateDiscount(product) {\r\n    // const totalAmount = parseInt(!product.sellingPrice ? 0 : product.sellingPrice, 10) * parseInt(!product.quantity ? 0 : product.quantity, 10);\r\n    // const discountAmount = totalAmount * (parseInt(!product.discount ? 0 : product.discount, 10) / 100); // Assuming discount is in percentage\r\n    // return discountAmount;\r\n    return parseFloat(product?.discount ? product?.discount : 0)\r\n  };\r\n\r\n  const handleSaveSalesOrder = () => {\r\n\r\n    const salesPayload = { ...sales };\r\n    const cashAmount = salesPayload.multipleMode.cash || 0;\r\n    const upiAmount = salesPayload.multipleMode.upi || 0;\r\n    const chequeAmount = salesPayload.multipleMode.cheque || 0;\r\n    const cardAmount = salesPayload.multipleMode.card || 0;\r\n    const modeAmounts = parseFloat(cashAmount) + parseFloat(upiAmount) + parseFloat(chequeAmount) + parseFloat(cardAmount);\r\n    const amountDifference = totalAmount - modeAmounts;\r\n    console.log(\"🚀 ~ handleSaveSalesOrder ~ amountDifference:\", amountDifference)\r\n\r\n    if (amountDifference < 0) {\r\n      enqueueSnackbar('Amount entered exceeds total amount!', { variant: 'error' });\r\n      return;\r\n    };\r\n\r\n    if (amountDifference > 0 && salesPayload.paymentStatus === 'PAID') {\r\n      enqueueSnackbar('Amount entered is less than total amount!. Please select paymentStatus as pending.', { variant: 'error' });\r\n      return;\r\n    };\r\n\r\n    if (typeof sales.mobileNumber === 'string' && sales.mobileNumber.length < 10) {\r\n      enqueueSnackbar('Mobile number must be 10 digits!', { variant: 'error' });\r\n      return;\r\n    };\r\n\r\n    if (sales.customer.length <= 1) {\r\n      enqueueSnackbar('Customer name must be greater than one alphabet!', { variant: 'error' });\r\n      return;\r\n    };\r\n\r\n    salesPayload.discount = {};\r\n    salesPayload.discount.productDiscount = productDiscount;\r\n    salesPayload.discount.amount = parseFloat(discount);\r\n    if (Object.keys(sales.offer).length > 0) {\r\n      salesPayload.discount.offer = {};\r\n      salesPayload.discount.offer.discount = offerDiscount;\r\n      salesPayload.discount.offer.id = sales.offer;\r\n    };\r\n    salesPayload.invoiceDate = dayjs(salesPayload.invoiceDate).format('YYYY-MM-DD');\r\n    salesPayload.totalDiscount = productDiscount + offerDiscount + parseFloat(discount);\r\n    salesPayload.totalAmount = totalAmount;\r\n    delete salesPayload.offer;\r\n    delete salesPayload.amountToPay;\r\n    delete salesPayload.invoiceDueDate;\r\n    delete salesPayload.paymentMode;\r\n    console.log(salesPayload);\r\n\r\n\r\n    // If no errors, proceed with saving\r\n    const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n    const accessToken = decryptToken(decryptedToken);\r\n    axios.post(endpoints.sales.add, salesPayload,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      })\r\n      .then((res) => {\r\n        enqueueSnackbar('Sales order created successfully!', { variant: 'success' });\r\n        setOpen(false);\r\n        handleClearAllStates();\r\n        fetchSales();\r\n        fetchSaleSummary();\r\n      }).catch((err) => {\r\n        enqueueSnackbar(err.error || err.err, { variant: 'error' });\r\n      })\r\n\r\n  };\r\n\r\n  const handleUpdateSalesOrder = () => {\r\n    if (totalAmount < previouslyPaidAmount) {\r\n      enqueueSnackbar(`Order Amount Must be greater than ${format(previouslyPaidAmount)}!`, { variant: 'error' });\r\n      return;\r\n    };\r\n\r\n    if (balanceAmount !== 0) {\r\n      if (sales.amountToPay === '' || parseFloat(sales.amountToPay) === 0) {\r\n        enqueueSnackbar(`Amount to pay cannot be empty or 0!.`, { variant: 'error' });\r\n        return;\r\n      };\r\n      if (parseFloat(sales.amountToPay) > (totalAmount - previouslyPaidAmount)) {\r\n        enqueueSnackbar(`Amount to pay cannot be greater than ${format(totalAmount - previouslyPaidAmount)}!`, { variant: 'error' });\r\n        return;\r\n      };\r\n    }\r\n\r\n    console.log(\"sales.amountToPay\", sales.amountToPay)\r\n\r\n    const updatePayload = { ...sales };\r\n    updatePayload.discount = {};\r\n    updatePayload.discount.productDiscount = productDiscount;\r\n    updatePayload.discount.amount = parseFloat(discount);\r\n    if (Object.keys(sales.offer).length > 0) {\r\n      updatePayload.discount.offer = {};\r\n      updatePayload.discount.offer.discount = offerDiscount;\r\n      updatePayload.discount.offer.id = sales.offer;\r\n    };\r\n    updatePayload.products = sales.products;\r\n    updatePayload.balanceAmount = balanceAmount;\r\n    updatePayload.totalDiscount = productDiscount + offerDiscount + parseFloat(discount);\r\n    updatePayload.totalAmount = totalAmount;\r\n    updatePayload.paymentStatus = sales.paymentStatus;\r\n    updatePayload.id = tempData._id;\r\n\r\n    delete updatePayload.offer;\r\n    delete updatePayload.invoiceDueDate;\r\n    delete updatePayload.salesMan;\r\n    delete updatePayload.customer;\r\n    delete updatePayload.invoiceDate;\r\n    delete updatePayload.mobileNumber;\r\n    console.log({ updatePayload });\r\n\r\n\r\n\r\n    // If no errors, proceed with saving\r\n    const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n    const accessToken = decryptToken(decryptedToken);\r\n    axios.post(endpoints.sales.update, updatePayload,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        }\r\n      })\r\n      .then((res) => {\r\n        enqueueSnackbar('Sales order updated successfully!', { variant: 'success' });\r\n        setOpen(false);\r\n        setTempData({});\r\n        handleClearAllStates();\r\n        fetchSales();\r\n        setEditSales(false);\r\n        fetchSaleSummary();\r\n      }).catch((err) => {\r\n        enqueueSnackbar(err.error || err.err, { variant: 'error' });\r\n      })\r\n  }\r\n\r\n  const productDiscount = sales.products.reduce((total, product) => {\r\n    const discountAmount = calculateDiscount(product);\r\n    return total + discountAmount;\r\n  }, 0)\r\n\r\n  const netTotalAmountWithGST = sales.products.reduce((total, product) => {\r\n    const sellingPrice = parseInt(!product.sellingPrice ? 0 : product.sellingPrice, 10);\r\n    const quantity = parseInt(!product.quantity ? 0 : product.quantity, 10);\r\n    // const gstPercentage = parseFloat(product.product.gstValue); // Assuming gstValue is a string representing percentage\r\n    const netAmount = sellingPrice * quantity;\r\n    // const gstAmount = (netAmount * gstPercentage) / 100;\r\n    // const totalAmountWithGST = netAmount + gstAmount;\r\n    const totalAmountWithGST = netAmount;\r\n    return total + totalAmountWithGST;\r\n  }, 0);\r\n\r\n\r\n  let offerDiscount = 0;\r\n  if (Object.keys(sales.offer).length > 0) {\r\n    if (sales.offer.type === 'PERCENTAGE') {\r\n      offerDiscount = (netTotalAmountWithGST * sales.offer.typeValue) / 100;\r\n    } else {\r\n      offerDiscount = sales.offer.typeValue;\r\n    }\r\n  }\r\n\r\n  let totalAmount = netTotalAmountWithGST - (productDiscount + Number(offerDiscount)) - parseFloat(discount !== '' ? discount : 0);\r\n\r\n  // if (editSales) {\r\n  //   totalAmount -= previouslyPaidAmount;\r\n  // };\r\n\r\n  let balanceAmount = 0;\r\n  if (sales.multipleMode.cash !== '' || sales.multipleMode.upi !== '' || sales.multipleMode.cheque !== '' || sales.multipleMode.card !== '' || sales.multipleMode.cheque !== '') {\r\n    const salesMode = sales.multipleMode || { cash: 0, upi: 0, cheque: 0, card: 0 };\r\n\r\n    const cash = parseFloat(salesMode.cash || 0);\r\n    const upi = parseFloat(salesMode.upi || 0);\r\n    const cheque = parseFloat(salesMode.cheque || 0);\r\n    const card = parseFloat(salesMode.card || 0);\r\n\r\n    balanceAmount = totalAmount - (cash + upi + cheque + card);\r\n\r\n    if (editSales) {\r\n      balanceAmount -= previouslyPaidAmount;\r\n    }\r\n  };\r\n\r\n  const [startDate, setStartDate] = useState(dayjs().startOf('month'));\r\n  const [endDate, setEndDate] = useState(dayjs().endOf('month'));\r\n\r\n  const handleStartDateChange = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const handleEndDateChange = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (startDate && endDate) {\r\n      const filteredSales = tempList.filter((sale) => {\r\n        const saleDate = dayjs(sale.createdAt);\r\n        console.log(startDate, endDate)\r\n        return saleDate.isBetween(startDate, endDate, null, '[]');\r\n      });\r\n      setSalesList(filteredSales);\r\n    } else {\r\n      setSalesList(tempList);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [startDate, endDate])\r\n\r\n\r\n  const filteredSales = salesList.filter((salesData) =>\r\n    salesData?.customerId.name?.toLowerCase().includes(searchQuery?.toLowerCase()) ||\r\n    salesData?.invoiceNumber?.toLowerCase().includes(searchQuery?.toLowerCase())\r\n  );\r\n\r\n  const handleBlur = (event, field) => {\r\n    const { value } = event.target;\r\n    if (value !== '' && parseFloat(value) < 0) {\r\n      enqueueSnackbar(`Error: Negative amount not allowed for ${field.toUpperCase()}`, { variant: 'error' });\r\n      setSales((prev) => ({\r\n        ...prev,\r\n        multipleMode: {\r\n          ...prev.multipleMode,\r\n          [field]: ''\r\n        }\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth={settings.themeStretch ? false : 'xl'}>\r\n      <Typography variant=\"h4\"> Sales </Typography>\r\n      <div style={{ display: 'flex', flexDirection: 'row', justifyContent: \"space-between\", marginTop: \"20px\" }}>\r\n        <Stack direction=\"row\" spacing={1}>\r\n          <Chip\r\n            label={`Total  ${formatObj.format(salesSummary.totalSalesAmount)}`}\r\n            variant=\"outlined\"\r\n          />\r\n          <Chip\r\n            label={`Paid  ${formatObj.format(salesSummary.totalPaidAmount)}`}\r\n            variant=\"outlined\"\r\n          />\r\n          <Chip\r\n            label={`Pending  ${formatObj.format(salesSummary.pendingAmount)}`}\r\n            variant=\"outlined\"\r\n          />\r\n        </Stack>\r\n\r\n        {\r\n          user?.permissions?.sales?.u &&\r\n          <Stack>\r\n            <Button variant='contained' color='primary' startIcon={<AddIcon />} onClick={handleOpen}>\r\n              CREATE SALES ORDER\r\n            </Button>\r\n          </Stack>\r\n        }\r\n      </div >\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <div style={{ display: \"flex\", flexDirection: 'row', alignItems: \"center\", gap: \"10px\" }}>\r\n          <div >\r\n            <TextField\r\n              placeholder='Search'\r\n              size='small'\r\n              value={searchQuery}\r\n              onChange={e => setSearchQuery(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <LocalizationProvider dateAdapter={AdapterDayjs} >\r\n              <Box sx={{ display: 'flex', flexDirection: 'row', gap: '10px', alignItems: 'center' }}>\r\n                <DatePicker\r\n                  label=\"From\"\r\n                  format='DD/MM/YYYY'\r\n                  value={startDate}\r\n                  slotProps={{ textField: { size: 'small' } }}\r\n                  onChange={handleStartDateChange}\r\n                  renderInput={(props) => <TextField {...props} />}\r\n                />\r\n                <Typography>-</Typography>\r\n                <DatePicker\r\n                  label=\"To\"\r\n                  format='DD/MM/YYYY'\r\n                  value={endDate}\r\n                  slotProps={{ textField: { size: 'small' } }}\r\n                  onChange={handleEndDateChange}\r\n                  renderInput={(props) => <TextField {...props} />}\r\n                />\r\n              </Box>\r\n            </LocalizationProvider>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div style={{ marginTop: \"20px\" }}>\r\n          <DataTable\r\n            columns={columns}\r\n            data={filteredSales}\r\n            pagination\r\n            progressPending={isSalesLoading}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* <Button onClick={() => {\r\n        // window.location.href = `mailto:rsaiprasad4@gmail.com?subject=Shared Content&body=Hii hello`;\r\n        window.location.href = `https://wa.me/+919922466094?text=Hiii Sourav`;\r\n      }}>\r\n        Send Via Email\r\n      </Button> */}\r\n\r\n\r\n      {/* Sales Modal */}\r\n      <Modal\r\n        open={open}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n\r\n          <div style={{ display: 'flex', flexDirection: 'column', gap: '10px', backgroundColor: \"white\", padding: \"15px\", borderRadius: \"10px\" }}>\r\n            <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', gap: '15px' }}>\r\n              <Autocomplete\r\n                disabled={editSales}\r\n                value={sales.mobileNumber}\r\n                options={customers}\r\n                fullWidth\r\n                getOptionLabel={(option) => {\r\n                  if (typeof option === 'string') {\r\n                    return option;\r\n                  }\r\n                  return option.mobileNumber;\r\n                }}\r\n                selectOnFocus\r\n                onChange={(event, newValue) => {\r\n                  console.log({ newValue });\r\n                  console.log('event calling and changing value from options')\r\n                  if (newValue) {\r\n                    setSales((prev) => ({ ...prev, mobileNumber: newValue, customer: newValue.name }));\r\n                  } else {\r\n                    setSales((prev) => ({ ...prev, mobileNumber: null, customer: '' }));\r\n                  }\r\n                }}\r\n                onInputChange={(event, newInputValue) => {\r\n                  // Check if the input value is a new mobile number\r\n                  const isNewMobileNumber = !customers.some((customer) => customer.mobileNumber === newInputValue);\r\n                  if (isNewMobileNumber) {\r\n                    console.log('Mobile number new ');\r\n                    // If it's a new mobile number, clear the customer name\r\n                    setSales((prev) => ({ ...prev, mobileNumber: newInputValue, customer: '' }));\r\n                  } else {\r\n                    // If it's an existing mobile number, find and set the customer name\r\n                    const selectedCustomer = customers.find((customer) => customer.mobileNumber === newInputValue);\r\n                    setSales((prev) => ({ ...prev, mobileNumber: newInputValue, customer: selectedCustomer.name }));\r\n                  }\r\n                }}\r\n                onBlur={(e) => {\r\n                  const { mobileNumber } = sales;\r\n                  if (typeof mobileNumber === 'string') {\r\n                    if (/^\\d+$/.test(mobileNumber)) {\r\n                      // If all characters are digits, slice the first 10 characters\r\n                      setSales((prev) => ({ ...prev, mobileNumber: mobileNumber.slice(0, 10) }));\r\n                      // enqueueSnackbar('Mobile number must be 10 digits only!', { variant: 'error' });\r\n                    } else {\r\n                      // If input contains non-digit characters, clear the value and show an error message\r\n                      setSales((prev) => ({ ...prev, mobileNumber: '' }));\r\n                      enqueueSnackbar('Mobile number must be numerical digits only!', { variant: 'error' });\r\n                    }\r\n                  }\r\n                }}\r\n                freeSolo\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"Mobile Number\" fullWidth />\r\n                )}\r\n              />\r\n              <TextField\r\n                label='Customer Name'\r\n                disabled={editSales}\r\n                value={sales.customer}\r\n                onBlur={(e) => {\r\n                  const customerName = sales.customer;\r\n                  if (/\\d/.test(customerName)) {\r\n                    // If customerName contains digits, clear the value\r\n                    setSales((prev) => ({ ...prev, customer: '' }));\r\n                    enqueueSnackbar('Customer name cannot contain digits!', { variant: 'error' });\r\n                  }\r\n                }}\r\n                fullWidth\r\n                onChange={(e) => {\r\n                  setSales((prev) => ({ ...prev, customer: e.target.value }));\r\n                }}\r\n              />\r\n\r\n            </div>\r\n\r\n            <div style={{ display: 'flex', flexDirection: 'row', gap: '15px' }}>\r\n\r\n              <Autocomplete\r\n                value={sales.salesMan}\r\n                disabled={editSales}\r\n                options={employees}\r\n                getOptionLabel={(prop) => `${prop.name} - ${prop.code}`}\r\n                fullWidth\r\n                onChange={(event, newValue) => {\r\n                  setSales((prev) => ({ ...prev, salesMan: newValue }))\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField {...params} label=\"Sales Man\" fullWidth />\r\n                )}\r\n              />\r\n              <LocalizationProvider dateAdapter={AdapterDayjs} >\r\n                <DatePicker\r\n\r\n                  label=\"Invoice Date\"\r\n                  value={sales.invoiceDate}\r\n                  onChange={(newValue) => {\r\n                    setSales((prev) => ({ ...prev, invoiceDate: newValue }))\r\n                  }}\r\n                  format=\"DD/MM/YYYY\"\r\n                  disabled={editSales}\r\n                  slotProps={{ textField: { fullWidth: true } }}\r\n                />\r\n              </LocalizationProvider>\r\n              {/* <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                <DatePicker\r\n                  label=\"Invoice Due Date\"\r\n                  format=\"DD/MM/YYYY\"\r\n                  value={sales.invoiceDueDate}\r\n                  minDate={sales.invoiceDate}\r\n                  onChange={(newValue) => {\r\n                    setSales((prev) => ({ ...prev, invoiceDueDate: newValue }))\r\n                  }}\r\n                  slotProps={{ textField: { fullWidth: true } }}\r\n                />\r\n              </LocalizationProvider> */}\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n\r\n          {/* Second Row */}\r\n          <Grid container sx={{ backgroundColor: \"white\", padding: \"15px\", borderRadius: \"10px\", display: \"flex\", justifyContent: 'space-between' }} alignItems='center'>\r\n            <Grid item xs={12} md={12} display='flex'>\r\n              {/* <FormControl sx={{ width: \"35%\" }} >\r\n                <InputLabel id=\"demo-simple-select-label\">All Categories</InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  label='All Categories'\r\n                  value={saleProduct.category}\r\n                  onChange={(e) => {\r\n                    setSaleProduct((prev) => ({ ...prev, category: e.target.value, product: null, quantity: null }))\r\n                  }}\r\n                  disabled={editSales}\r\n                >\r\n                  <MenuItem value='All Categories'>All Categories</MenuItem>\r\n                  {\r\n                    categories.map((catgy, index) => (\r\n                      <MenuItem key={index} value={catgy.name}>{catgy.name}</MenuItem>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </FormControl> */}\r\n\r\n\r\n              <Autocomplete\r\n                options={products}\r\n                getOptionLabel={(option) => `${option.productId.name} - ${option.barcode}`}\r\n                value={saleProduct?.product ?? null}\r\n                onChange={(event, newValue) => {\r\n                  if (newValue) {\r\n                    setSaleProduct((prev) => ({ ...prev, product: newValue }));\r\n                    addProductToSales(newValue);\r\n                  } else {\r\n                    setSaleProduct((prev) => ({ ...prev, product: null }));\r\n                  }\r\n                }}\r\n                // disabled={editSales}\r\n                fullWidth\r\n                renderInput={(params) => (\r\n                  <TextField {...params} inputRef={autocompleteRef} label=\"Search Products\" fullWidth />\r\n                )}\r\n              />\r\n            </Grid>\r\n\r\n            {/* <Grid item xs={12} md={2}>\r\n              <TextField\r\n                label='Quantity'\r\n                type='number'\r\n                disabled={editSales}\r\n                onChange={(e) => setSaleProduct((prev) => ({ ...prev, quantity: e.target.value }))}\r\n                value={saleProduct.quantity}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} md={2} >\r\n              <Button\r\n                startIcon={<AddIcon />}\r\n                disabled={\r\n                  saleProduct.product === null\r\n                  || saleProduct.quantity === null ||\r\n                  saleProduct.quantity <= 0\r\n                }\r\n                variant='contained'\r\n                color='primary'\r\n                onClick={addProductToSales}\r\n                fullWidth\r\n              >\r\n                ADD TO ORDER\r\n              </Button>\r\n            </Grid> */}\r\n          </Grid>\r\n\r\n\r\n          {\r\n            sales.products.length > 0 &&\r\n\r\n            <Grid container sx={{ backgroundColor: \"white\", padding: \"15px\", borderRadius: \"10px\", }} alignItems='center'>\r\n              <Grid item xs={12}>\r\n                <DataTable\r\n                  columns={productColumns}\r\n                  data={sales.products}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} display='flex' justifyContent='flex-end' sx={{ mt: 2 }}>\r\n\r\n                <div style={{ width: '200px' }}>\r\n                  <div>\r\n                    Voucher\r\n                  </div>\r\n                  <div style={{ paddingTop: \"5px\" }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      size='small'\r\n                      type='number'\r\n                      label=\"Enter Discount\"\r\n                      onBlur={(e) => {\r\n                        if (discount === '') {\r\n                          setDiscount('0');\r\n                        };\r\n                        if (parseFloat(discount) > totalAmount) {\r\n                          setDiscount('');\r\n                          enqueueSnackbar('Discount cannot be greater than total amount!', { variant: 'error' });\r\n                        };\r\n                      }}\r\n                      value={discount}\r\n                      onChange={(e) => {\r\n                        if (Object.keys(sales.offer).length > 0) {\r\n                          setSales((prev) => ({ ...prev, offer: {} }))\r\n                        };\r\n                        setDiscount(e.target.value)\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n              </Grid>\r\n              {/* <ListItemText primary='OR' sx={{ display: 'flex', justifyContent: \"flex-end\", marginRight: '100px', mt: 0.5 }} /> */}\r\n              {/* <Grid item xs={12} display='flex' justifyContent='flex-end' sx={{ mt: 0.5 }}>\r\n                <div style={{ width: '200px' }} >\r\n                  <div>\r\n                    Select Offer\r\n                  </div>\r\n                  <div style={{ paddingTop: \"5px\" }}>\r\n                    {\r\n                      Object.keys(sales?.offer).length > 0\r\n                        ? <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                          <Chip variant='contained' color='primary' label={`Offer Applied : ${sales.offer.code}`} onDelete={() => { setSales((prev) => ({ ...prev, offer: {} })) }} />\r\n                          <Typography variant='caption' gutterBottom >\r\n                            {\r\n                              sales.offer.type === 'PERCENTAGE' ?\r\n                                `${sales.offer.typeValue}% Off` :\r\n                                `${format(sales.offer.typeValue)} Off`\r\n                            }\r\n                          </Typography>\r\n                        </div>\r\n                        :\r\n                        <div style={{ paddingTop: \"5px\" }}>\r\n                          <FormControl fullWidth size=\"small\">\r\n                            <InputLabel id=\"demo-simple-select-label\">Select Offer</InputLabel>\r\n                            <Select\r\n                              disabled={discount}\r\n                              labelId=\"demo-simple-select-label\"\r\n                              id=\"demo-simple-select\"\r\n                              label='Select Offer'\r\n                              value={sales.offer ?? ''}\r\n                              onChange={(e) => setSales((prev) => ({ ...prev, offer: e.target.value }))}\r\n                            >\r\n                              {offers.map((offer, i) => (\r\n                                <MenuItem key={i} value={offer}>{offer.code}</MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                    }\r\n                  </div>\r\n                </div>\r\n              </Grid> */}\r\n            </Grid>\r\n          }\r\n\r\n          <Grid container display='flex' justifyContent='flex-end'>\r\n            <Grid item xs={12} md={6} lg={6} sx={{ backgroundColor: \"white\", padding: \"15px\", borderRadius: \"10px\", }}>\r\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                  <div>Product Discount</div>\r\n                  <div>{\r\n                    sales.products.length === 0 ?\r\n                      format(0) :\r\n                      format(productDiscount + parseFloat(discount))\r\n                  }</div>\r\n                </div>\r\n\r\n                {\r\n                  Object.keys(sales.offer).length !== 0 ?\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                      <div>Offer Discount</div>\r\n                      <div>{\r\n                        format(offerDiscount)\r\n                      }</div>\r\n                    </div>\r\n                    : null\r\n                }\r\n\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                  <div>Total Amount</div>\r\n                  <div>{\r\n                    sales.products.length === 0 ?\r\n                      format(0) :\r\n                      format(netTotalAmountWithGST)\r\n                  }</div>\r\n                </div>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <div style={{ backgroundColor: \"white\", padding: \"15px\", borderRadius: \"10px\" }} >\r\n            <div style={{ display: 'flex', flexDirection: 'row', gap: '10px' }} >\r\n              <TextField\r\n                name='cashAmount'\r\n                placeholder='Enter cash amount if you want to'\r\n                label='Cash'\r\n                fullWidth\r\n                type='number'\r\n                size='small'\r\n                value={sales.multipleMode.cash}\r\n                onChange={(e) => setSales((prev) => ({ ...prev, multipleMode: { ...prev.multipleMode, cash: e.target.value } }))}\r\n                onBlur={(e) => handleBlur(e, 'cash')}\r\n              />\r\n              <TextField\r\n                name='cashAmount'\r\n                placeholder='Enter upi amount if you want to'\r\n                label='UPI'\r\n                fullWidth\r\n                type='number'\r\n                size='small'\r\n                value={sales.multipleMode.upi}\r\n                onChange={(e) => setSales((prev) => ({ ...prev, multipleMode: { ...prev.multipleMode, upi: e.target.value } }))}\r\n                onBlur={(e) => handleBlur(e, 'upi')}\r\n              />\r\n              <TextField\r\n                name='cashAmount'\r\n                placeholder='Enter cheque amount if you want to'\r\n                label='CHEQUE'\r\n                fullWidth\r\n                type='number'\r\n                size='small'\r\n                value={sales.multipleMode.cheque}\r\n                onChange={(e) => setSales((prev) => ({ ...prev, multipleMode: { ...prev.multipleMode, cheque: e.target.value } }))}\r\n                onBlur={(e) => handleBlur(e, 'cheque')}\r\n              />\r\n              <TextField\r\n                name='cashAmount'\r\n                placeholder='Enter card amount if you want to'\r\n                label='CARD'\r\n                fullWidth\r\n                type='number'\r\n                size='small'\r\n                value={sales.multipleMode.card}\r\n                onChange={(e) => setSales((prev) => ({ ...prev, multipleMode: { ...prev.multipleMode, card: e.target.value } }))}\r\n                onBlur={(e) => handleBlur(e, 'card')}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n\r\n          {/* <Grid container display='flex' justifyContent='flex-end'>\r\n            <Grid item xs={12} md={6} lg={6} sx={{ backgroundColor: \"white\", padding: \"15px\", borderRadius: \"10px\", display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n              <div style={{ display: 'flex', flexDirection: 'row', gap: '10px' }} >\r\n                <TextField\r\n                  fullWidth\r\n                  disabled={editSales}\r\n                  size='small'\r\n                  type='number'\r\n                  label=\"Enter Amount\"\r\n                  onBlur={(e) => {\r\n                    console.log(\"totalAmount\", totalAmount)\r\n                    if (parseFloat(sales.amountToPay) > totalAmount) {\r\n                      enqueueSnackbar('Amount to pay cannot be greater than total amount!', { variant: 'error' });\r\n                      setSales((prev) => ({ ...prev, amountToPay: 0 }));\r\n                    };\r\n                  }}\r\n                  value={sales.amountToPay}\r\n                  onChange={(e) => {\r\n                    setSales((prev) => ({ ...prev, amountToPay: e.target.value }));\r\n                  }}\r\n                />\r\n\r\n                <FormControl fullWidth size=\"small\" >\r\n                  <InputLabel id=\"demo-simple-select-label\">Select Payment Status</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    label='Select Payment Status'\r\n                    value={sales.paymentStatus}\r\n                    disabled={editSales}\r\n                    onChange={(e) => setSales((prev) => ({ ...prev, paymentStatus: e.target.value }))}\r\n                  >\r\n                    {\r\n                      common.paymentStatus.map((paymentStatus, index) => (\r\n                        <MenuItem key={index} value={paymentStatus}>{paymentStatus}</MenuItem>\r\n                      ))\r\n                    }\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              <div style={{ display: 'flex', flexDirection: 'row', gap: '10px' }} >\r\n                <FormControl fullWidth size=\"small\" >\r\n                  <InputLabel id=\"demo-simple-select-label\">Select Payment Mode</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    label='Select Payment Mode'\r\n                    value={sales.paymentMode}\r\n                    disabled={editSales}\r\n                    onChange={(e) => setSales((prev) => ({ ...prev, paymentMode: e.target.value }))}\r\n                  >\r\n                    {\r\n                      [\r\n                        'CASH',\r\n                        'CARD',\r\n                        'UPI',\r\n                        'CHEQUE',\r\n                      ].map((paymentMode, index) => (\r\n                        <MenuItem key={index} value={paymentMode}>{paymentMode}</MenuItem>\r\n                      ))\r\n                    }\r\n                  </Select>\r\n                </FormControl>\r\n\r\n\r\n                <FormControl fullWidth size=\"small\" >\r\n                  <InputLabel id=\"demo-simple-select-label\">Select Bank</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    label='Select Bank'\r\n                    value={sales.bank}\r\n                    disabled={\r\n                      editSales ||\r\n                      (sales.paymentMode === 'CASH')}\r\n                    onChange={(e) => setSales((prev) => ({ ...prev, bank: e.target.value }))}\r\n                  >\r\n                    {\r\n                      banks.map((bank, index) => (\r\n                        <MenuItem key={index} value={bank._id} >{bank.bankName}</MenuItem>\r\n                      ))\r\n                    }\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n            </Grid>\r\n\r\n          </Grid> */}\r\n          <div style={{ backgroundColor: \"white\", padding: \"15px\", borderRadius: \"10px\" }} >\r\n            <div style={{ display: 'flex', flexDirection: 'row', gap: '10px' }} >\r\n\r\n              <FormControl fullWidth size=\"small\" >\r\n                <InputLabel id=\"demo-simple-select-label\">Select Payment Status</InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  label='Select Payment Status'\r\n                  value={sales.paymentStatus}\r\n                  disabled={editSales}\r\n                  onChange={(e) => setSales((prev) => ({ ...prev, paymentStatus: e.target.value }))}\r\n                >\r\n                  {\r\n                    common.paymentStatus.map((paymentStatus, index) => (\r\n                      <MenuItem key={index} value={paymentStatus}>{paymentStatus}</MenuItem>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl fullWidth size=\"small\" >\r\n                <InputLabel id=\"demo-simple-select-label\">Select Bank</InputLabel>\r\n                <Select\r\n                  labelId=\"demo-simple-select-label\"\r\n                  id=\"demo-simple-select\"\r\n                  label='Select Bank'\r\n                  value={sales.bank}\r\n                  disabled={\r\n                    editSales ||\r\n                    (sales.paymentMode === 'CASH')}\r\n                  onChange={(e) => setSales((prev) => ({ ...prev, bank: e.target.value }))}\r\n                >\r\n                  {\r\n                    banks.map((bank, index) => (\r\n                      <MenuItem key={index} value={bank._id} >{bank.bankName}</MenuItem>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <Grid container  >\r\n            <Grid item xs={12} md={12} lg={12} sx={{ backgroundColor: \"white\", p: \"15px\", borderRadius: \"10px\" }} display='flex' justifyContent='space-between' alignItems='center'>\r\n              <div style={{ display: 'flex', justifyContent: 'flex-start', gap: '20px' }}>\r\n\r\n                <div style={{ display: \"flex\", flexDirection: 'row', justifyContent: 'space-around', gap: '40px' }}>\r\n                  <div>Total  :</div>\r\n                  <div>{\r\n                    sales.products.length === 0 ?\r\n                      format(0) :\r\n                      format(totalAmount)\r\n                  }</div>\r\n                </div>\r\n                <div style={{ display: \"flex\", flexDirection: 'row', justifyContent: 'space-around', gap: '40px' }}>\r\n                  <div>Balance  :</div>\r\n                  <div>{\r\n                    sales.products.length === 0 ?\r\n                      format(0) :\r\n                      format(balanceAmount)\r\n                  }</div>\r\n                </div>\r\n\r\n                {\r\n                  editSales &&\r\n                  <div style={{ display: \"flex\", flexDirection: 'row', justifyContent: 'space-around', gap: '40px' }}>\r\n                    <div>Previously Paid  :</div>\r\n                    <div>{\r\n                      sales.products.length === 0 ?\r\n                        format(0) :\r\n                        format(previouslyPaidAmount)\r\n                    }</div>\r\n                  </div>\r\n                }\r\n              </div>\r\n\r\n              <div style={{ display: 'flex', gap: '10px' }}>\r\n\r\n                {\r\n                  editSales ?\r\n                    <Button variant='contained'\r\n                      onClick={handleUpdateSalesOrder}\r\n                      color='primary' disabled={\r\n                        !sales.paymentStatus\r\n                      } >UPDATE</Button>\r\n\r\n                    :\r\n                    <Button variant='contained'\r\n                      onClick={handleSaveSalesOrder}\r\n                      color='primary' disabled={\r\n                        !sales.customer ||\r\n                        !sales.mobileNumber ||\r\n                        !sales.salesMan ||\r\n                        sales.products.length === 0 ||\r\n                        !sales.paymentStatus ||\r\n                        (\r\n                          sales.paymentMode !== 'CASH' && !sales.bank\r\n                        )\r\n                      } >SAVE</Button>\r\n                }\r\n\r\n\r\n\r\n\r\n                <Button variant='contained' color='error' onClick={handleClose}>CANCEL</Button>\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n\r\n        </Box>\r\n      </Modal>\r\n\r\n\r\n\r\n\r\n\r\n      {/* RECORD PAYMENT MODAL  */}\r\n      <Modal id=\"paymentModal\"\r\n        open={recordPaymentModal}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={styleForRecordPayment}>\r\n          <Grid container sx={{ display: 'flex', flexDirection: 'column', gap: '10px' }} >\r\n            <Grid item xs={12}>\r\n              <Typography variant='h6'>Customer Details</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label='Name'\r\n                value={recordPayment.name}\r\n                disabled\r\n                sx={{ backgroundColor: 'white', borderRadius: '7px' }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label='Balance'\r\n                value={recordPayment.balance}\r\n                disabled\r\n                sx={{ backgroundColor: 'white', borderRadius: '7px' }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Typography variant='h6'>Payment Details</Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label='Amount To Pay'\r\n                value={recordPayment.amountToPay}\r\n                onBlur={\r\n                  () => {\r\n                    if (recordPayment.amountToPay > recordPayment.balance) {\r\n                      enqueueSnackbar('Amount to pay cannot be greater than balance!', { variant: 'error' });\r\n                      setRecordPayment((prev) => ({ ...prev, amountToPay: recordPayment.balance }));\r\n                    }\r\n                  }\r\n                }\r\n                onChange={(e) => setRecordPayment((prev) => ({ ...prev, amountToPay: e.target.value }))}\r\n                sx={{ backgroundColor: 'white', borderRadius: '7px' }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} >\r\n              <LocalizationProvider dateAdapter={AdapterDayjs} >\r\n                <DatePicker\r\n\r\n                  label=\"Payment Date\"\r\n                  value={recordPayment.paymentDate}\r\n                  maxDate={dayjs(new Date())}\r\n                  onChange={(newValue) => {\r\n                    setRecordPayment((prev) => ({ ...prev, paymentDate: newValue }))\r\n                  }}\r\n                  sx={{ backgroundColor: 'white', borderRadius: '7px' }}\r\n                  format=\"DD/MM/YYYY\"\r\n                  slotProps={{ textField: { fullWidth: true } }}\r\n                />\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <FormControl fullWidth >\r\n                <InputLabel id=\"record-payment-mode\">Select Payment Mode</InputLabel>\r\n                <Select\r\n                  labelId=\"record-payment-mode\"\r\n                  id=\"demo-simple-select\"\r\n                  label='Select Payment Mode'\r\n                  sx={{ backgroundColor: 'white', borderRadius: '7px' }}\r\n                  value={recordPayment.paymentMode}\r\n                  onChange={(e) => setRecordPayment((prev) => ({ ...prev, paymentMode: e.target.value }))}\r\n                >\r\n                  {\r\n                    [\r\n                      'CASH',\r\n                      'CARD',\r\n                      'UPI',\r\n                      'CHEQUE',\r\n                    ].map((paymentMode, index) => (\r\n                      <MenuItem key={index} value={paymentMode}>{paymentMode}</MenuItem>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            {\r\n              recordPayment.paymentMode !== 'CASH' &&\r\n              <Grid item xs={12}>\r\n                <FormControl fullWidth >\r\n                  <InputLabel id=\"select-bank\">Select Bank</InputLabel>\r\n                  <Select\r\n                    labelId=\"select-bank\"\r\n                    id=\"demo-simple-select\"\r\n                    label='Select Bank'\r\n                    value={recordPayment.bank}\r\n                    sx={{ backgroundColor: 'white', borderRadius: '7px' }}\r\n                    onChange={(e) => setRecordPayment((prev) => ({ ...prev, bank: e.target.value }))}\r\n                  >\r\n                    {\r\n                      banks.map((bank, index) => (\r\n                        <MenuItem key={index} value={bank._id} >{bank.bankName}</MenuItem>\r\n                      ))\r\n                    }\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            }\r\n            <Grid item xs={12} sx={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\r\n              <Button\r\n                variant='contained'\r\n                color='primary'\r\n                onClick={handleRecordPayment}\r\n                disabled={\r\n                  !recordPayment.amountToPay ||\r\n                  !recordPayment.paymentMode ||\r\n                  (recordPayment.paymentMode !== 'CASH' && !recordPayment.bank)\r\n                }\r\n              >\r\n                Update Payment\r\n              </Button>\r\n              <Button\r\n                variant='contained'\r\n                color='error'\r\n                onClick={() => {\r\n                  setRecordPaymentModal(false);\r\n                  setRecordPayment(initialRecordPaymentState);\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </Box>\r\n      </Modal>\r\n\r\n\r\n\r\n      {/* Dialog For Delete */}\r\n      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n        <DialogTitle>Remove</DialogTitle>\r\n        <DialogContent>\r\n          Are you sure you want to delete this sales order?\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => {\r\n            setOpenDialog(false);\r\n            setTempData({});\r\n          }}>Cancel</Button>\r\n          <Button onClick={handleConfirmDelete} variant=\"contained\" color=\"error\">\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    </Container >\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\n// sections\nimport OneView from 'src/sections/one/view';\n\n// ----------------------------------------------------------------------\n\nexport default function Page() {\n  return (\n    <>\n      <Helmet>\n        <title> Dashboard : Sales</title>\n      </Helmet>\n\n      <OneView />\n    </>\n  );\n}\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;"],"names":["style","position","top","left","transform","width","bgcolor","color","borderRadius","height","overflowY","boxShadow","display","flexDirection","justifyContent","gap","p","styleForRecordPayment","initialSaleState","customer","mobileNumber","salesMan","invoiceDate","invoiceDueDate","products","offer","amountToPay","totalAmount","productDiscount","paymentMode","paymentStatus","bank","multipleMode","cash","upi","cheque","card","initialSaleProduct","category","product","quantity","netAmount","discount","sellingPrice","initialRecordPaymentState","salesOrderId","name","balance","paymentDate","dayjs","Date","SalesView","_user$permissions2","_user$permissions2$sa","_saleProduct$product","settings","useSettingsContext","autocompleteRef","useRef","user","useAuthContext","_useState","useState","_useState2","_slicedToArray","setDiscount","_useState3","_useState4","previouslyPaidAmount","setPreviouslyPaidAmount","enqueueSnackbar","useSnackbar","_useState5","_useState6","open","setOpen","handleClearAllStates","setSales","setSaleProduct","prev","_objectSpread","_useState7","_useState8","openDialog","setOpenDialog","_useState9","_useState10","customers","setCustomers","_useState11","_useState12","employees","setEmployees","_useState13","_useState14","_useState15","_useState16","banks","setBanks","_useState17","_useState18","setProducts","_useState19","_useState20","setOffers","_useState21","_useState22","sales","_useState23","_useState24","searchQuery","setSearchQuery","_useState25","_useState26","saleProduct","_useState27","_useState28","isSalesLoading","setIsSalesLoading","_useState29","_useState30","salesList","setSalesList","_useState31","_useState32","tempList","setTempList","_useState33","totalSalesAmount","totalPaidAmount","pendingAmount","_useState34","salesSummary","setSaleSummary","_useState35","_useState36","anchorEl","setAnchorEl","openMenu","Boolean","_useState37","_useState38","tempData","setTempData","_useState39","_useState40","recordPaymentModal","setRecordPaymentModal","_useState41","_useState42","recordPayment","setRecordPayment","_useState43","_useState44","editSales","setEditSales","fetchCustomers","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","decryptedToken","accessToken","response","wrap","_context","next","localStorage","getItem","constants","decryptToken","axios","endpoints","headers","Authorization","concat","sent","data","t0","variant","stop","apply","arguments","fetchEmployeesData","_ref2","_callee2","_context2","fetchProducts","_ref3","_callee3","_context3","fetchOffers","_ref5","_callee5","_context5","status","fetchSales","_ref6","_callee6","_context6","fetchBanks","_ref7","_callee7","_context7","fetchSaleSummary","_ref8","_callee8","_context8","useEffect","columns","selector","row","invoiceNumber","customerId","sortable","salesManId","length","toFixed","payments","paymentID","amount","cell","_user$permissions","_user$permissions$sal","_jsxs","_Fragment","children","_jsx","Button","disabled","permissions","u","onClick","event","currentTarget","endIcon","ArrowDropDownIcon","Menu","id","onClose","MenuListProps","MenuItem","remainingAmount","_id","handleProductChange","index","field","fieldValue","updatedProducts","_toConsumableArray","console","log","prevSales","productColumns","_row$product$name","_row$product","TextField","autoFocus","type","onBlur","e","parseInt","onChange","target","value","size","center","productBarcodePrice","barcodePurchasePrice","format","String","sgst","igst","cgst","IconButton","newProducts","splice","handleDeleteProduct","DeleteIcon","Intl","NumberFormat","currency","reduce","total","discountAmount","parseFloat","calculateDiscount","netTotalAmountWithGST","offerDiscount","Object","keys","typeValue","Number","balanceAmount","salesMode","_useState45","startOf","_useState46","startDate","setStartDate","_useState47","endOf","_useState48","endDate","setEndDate","filteredSales","filter","sale","saleDate","createdAt","isBetween","salesData","_salesData$customerId","_salesData$invoiceNum","toLowerCase","includes","handleBlur","toUpperCase","_defineProperty","Container","maxWidth","themeStretch","Typography","marginTop","Stack","direction","spacing","Chip","label","formatObj","startIcon","AddIcon","alignItems","placeholder","InputProps","startAdornment","InputAdornment","SearchIcon","LocalizationProvider","dateAdapter","AdapterDayjs","Box","sx","DatePicker","slotProps","textField","date","renderInput","props","DataTable","pagination","progressPending","Modal","backgroundColor","padding","Autocomplete","options","fullWidth","getOptionLabel","option","selectOnFocus","newValue","onInputChange","newInputValue","some","selectedCustomer","find","test","slice","freeSolo","params","customerName","prop","code","Grid","container","item","xs","md","productId","barcode","_newValue$productId","_newValue$productId2","_newValue$productId3","existingProduct","productToAdd","purchasePrice","current","blur","addProductToSales","inputRef","mt","paddingTop","lg","FormControl","InputLabel","Select","labelId","common","map","bankName","updatePayload","totalDiscount","then","res","catch","err","error","salesPayload","cashAmount","upiAmount","chequeAmount","cardAmount","modeAmounts","amountDifference","maxDate","recordPaymentPayload","Dialog","DialogTitle","DialogContent","DialogActions","config","msg","Page","Helmet","OneView","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d","_excluded","DialogTitleRoot","styled","slot","overridesResolver","styles","root","flex","React","inProps","ref","useThemeProps","className","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","_React$useContext$tit","DialogContext","titleId","_extends","component","clsx"],"sourceRoot":""}