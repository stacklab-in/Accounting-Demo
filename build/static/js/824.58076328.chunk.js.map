{"version":3,"file":"static/js/824.58076328.chunk.js","mappings":"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","sources":["sections/product-management/productBarcode.js","pages/dashboard/product/barcode.js"],"sourcesContent":["// @mui\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\n// components\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { Grid, Tab, Tabs, TextField, Button, InputAdornment, Modal, MenuItem, Menu } from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport DataTable from 'react-data-table-component';\r\nimport { constants } from 'src/utils/constant';\r\nimport { color, decryptToken, formatDate } from 'src/utils/common';\r\nimport axios, { endpoints } from 'src/utils/axios';\r\nimport PrintIcon from '@mui/icons-material/Print';\r\nimport { useSnackbar } from 'src/components/snackbar';\r\nimport { useAuthContext } from 'src/auth/hooks';\r\nimport Barcode from 'react-barcode';\r\nimport { useReactToPrint } from 'react-to-print';\r\n// ----------------------------------------------------------------------\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '60%',\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    borderRadius: '10px',\r\n    p: 3,\r\n};\r\n\r\nconst styleForBarcode = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '400px',\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 24,\r\n    borderRadius: '10px',\r\n    p: 3,\r\n};\r\n\r\n\r\nexport default function ProductBarcode() {\r\n    const settings = useSettingsContext();\r\n    const componentRef = useRef();\r\n    const { user } = useAuthContext();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [value, setValue] = useState('one');\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isProductsLoading, setIsProductsLoading] = useState(false);\r\n    const [products, setProducts] = useState([]);\r\n    const [barcodeValues, setBarcodeValues] = useState({\r\n        _id: '',\r\n        percentageValue: '',\r\n        value: ''\r\n    });\r\n    const [barcodeModal, setBarcodeModal] = useState(false);\r\n    const [product, setProduct] = useState({});\r\n\r\n    const handleBarcodeOpen = () => setBarcodeModal(true);\r\n    const handleBarcodeClose = () => setBarcodeModal(false);\r\n\r\n    const handleChangeTab = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const fetchBarcodeValues = async () => {\r\n\r\n        try {\r\n            const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n            const accessToken = decryptToken(decryptedToken);\r\n            const response = await axios.post(endpoints.productBarcodeValues.details, {}, {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                }\r\n            });\r\n            if (response) {\r\n                console.log(response);\r\n                setIsLoading(false);\r\n                if (response.data.data && Object.keys(response.data.data).length > 0) {\r\n                    setBarcodeValues(response.data.data);\r\n                };\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            enqueueSnackbar('Failed to fetch Barcode Values!', { variant: 'error' });\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n\r\n    const handleChangeBarcodeValues = (name, fieldValue) => {\r\n\r\n        setBarcodeValues((prev) => ({\r\n            ...prev,\r\n            [name]: fieldValue\r\n        }));\r\n\r\n\r\n\r\n    };\r\n\r\n    const fetchData = async () => {\r\n\r\n        try {\r\n            const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n            const accessToken = decryptToken(decryptedToken);\r\n            const response = await axios.post(endpoints.productBarcodeValues.list, {}, {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                }\r\n            });\r\n            if (response) {\r\n                setIsProductsLoading(false);\r\n                setProducts(response.data.data);\r\n            }\r\n        } catch (err) {\r\n            enqueueSnackbar('Failed to fetch products!', { variant: 'error' });\r\n            setIsProductsLoading(false);\r\n        }\r\n    };\r\n\r\n    // For Actions Dropdown\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const openMenu = Boolean(anchorEl);\r\n    // Temporary State\r\n    const [tempData, setTempData] = useState({});\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetchBarcodeValues();\r\n\r\n        // // Products\r\n        setIsProductsLoading(true);\r\n        fetchData();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSave = () => {\r\n        if (barcodeValues._id.length > 0) {\r\n            handleBarcodeUpdateValues();\r\n        } else {\r\n            handleBarcodeSaveValues();\r\n        }\r\n    }\r\n\r\n    const handleBarcodeSaveValues = async () => {\r\n\r\n\r\n        // If no errors, proceed with saving\r\n        const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n        const accessToken = decryptToken(decryptedToken);\r\n        axios.post(endpoints.productBarcodeValues.add, barcodeValues,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                }\r\n            })\r\n            .then((res) => {\r\n                enqueueSnackbar('Barcode Values created successfully!', { variant: 'success' });\r\n                setBarcodeValues(res.data.data);\r\n                handleClose();\r\n            }).catch((err) => {\r\n                enqueueSnackbar(err.error || err.msg, { variant: 'error' });\r\n            })\r\n    };\r\n\r\n    const handleBarcodeUpdateValues = async () => {\r\n        // If no errors, proceed with saving\r\n        const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n        const accessToken = decryptToken(decryptedToken);\r\n        axios.post(endpoints.productBarcodeValues.update, barcodeValues,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                }\r\n            })\r\n            .then((res) => {\r\n                enqueueSnackbar('Barcode Values updated successfully!', { variant: 'success' });\r\n                handleClose();\r\n            }).catch((err) => {\r\n                enqueueSnackbar(err.error || err.msg, { variant: 'error' });\r\n            })\r\n    };\r\n\r\n    const productBarcodeColumns = [\r\n        {\r\n            name: 'Product Name',\r\n            selector: row => row?.productId?.name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Product Barcode',\r\n            selector: row => row.barcode,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Last Updated',\r\n            selector: row => row?.updatedAt ? formatDate(row.updatedAt) : 'N/A',\r\n            sortable: true,\r\n            width: '250px',\r\n        },\r\n        {\r\n            name: 'Actions',\r\n            center: 'true',\r\n            cell: (row) => (\r\n                <Button style={{ color: color.actionButton }}\r\n                    onClick={() => {\r\n                        setProduct(row);\r\n                        handleBarcodeOpen();\r\n                    }} variant='outlined' endIcon={<PrintIcon />} >Preview & Print</Button>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const filteredBarcodeProducts =\r\n        products.filter((productBarcodeData) =>\r\n            productBarcodeData?.barcode?.toString().includes(searchQuery)\r\n        );\r\n    return (\r\n        <Container maxWidth={settings.themeStretch ? false : 'xl'}>\r\n            <Typography variant=\"h4\"> Product Barcode </Typography>\r\n\r\n\r\n            <Tabs\r\n                sx={{ mt: 2 }}\r\n                value={value}\r\n                onChange={handleChangeTab}\r\n                textColor=\"secondary\"\r\n                indicatorColor=\"secondary\"\r\n                aria-label=\"secondary tabs example\"\r\n            >\r\n                <Tab value=\"one\" label=\"Barcode\" />\r\n                <Tab value=\"two\" label=\"Barcode Values\" />\r\n            </Tabs>\r\n\r\n\r\n            {\r\n                value === 'one' &&\r\n                <Box\r\n                    sx={{\r\n                        mt: 2,\r\n                        width: 1,\r\n                        p: 2,\r\n                        borderRadius: 2,\r\n                        bgcolor: (theme) => alpha(theme.palette.grey[500], 0.04),\r\n                        border: (theme) => `dashed 1px ${theme.palette.divider}`,\r\n                    }}\r\n                >\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                size=\"small\"\r\n                                onChange={(e) => setSearchQuery(e.target.value)}\r\n                                type=\"text\"\r\n                                placeholder=\"Search Barcode\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <SearchIcon />\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n\r\n                            <DataTable\r\n                                style={{ borderRadius: \"20px\" }}\r\n                                title='Barcodes'\r\n                                data={filteredBarcodeProducts}\r\n                                columns={productBarcodeColumns}\r\n                                progressPending={isProductsLoading}\r\n                                pagination\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            }\r\n\r\n\r\n\r\n            {\r\n                value === 'two' &&\r\n                <Box\r\n                    sx={{\r\n                        mt: 2,\r\n                        width: 1,\r\n                        p: 2,\r\n                        borderRadius: 2,\r\n                        bgcolor: (theme) => alpha(theme.palette.grey[500], 0.04),\r\n                        border: (theme) => `dashed 1px ${theme.palette.divider}`,\r\n                    }}\r\n                >\r\n                    <Grid container spacing={2}>\r\n\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"Percentage Value\"\r\n                                name='percentageValue'\r\n                                value={barcodeValues.percentageValue}\r\n                                InputProps={{\r\n                                    endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n                                }}\r\n                                disabled\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"Value\"\r\n                                name='value'\r\n                                value={barcodeValues.value}\r\n                                disabled\r\n                            />\r\n                        </Grid>\r\n\r\n                        {\r\n                            user?.permissions?.product?.u &&\r\n\r\n                            <Grid item xs={12}>\r\n                                <Button variant='contained' onClick={handleOpen} >\r\n                                    CONFIGURE\r\n                                </Button>\r\n                            </Grid>\r\n                        }\r\n\r\n                    </Grid>\r\n                </Box>\r\n            }\r\n\r\n            <Modal\r\n                open={open}\r\n            >\r\n                <Box sx={style}>\r\n                    <Grid container spacing={2}>\r\n\r\n                        <Grid item xs={6}>\r\n\r\n                            <TextField\r\n                                fullWidth\r\n                                type='number'\r\n                                label=\"Percentage Value\"\r\n                                name='percentageValue'\r\n                                value={barcodeValues.percentageValue}\r\n                                InputProps={{\r\n                                    endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n                                }}\r\n                                onChange={(e) => handleChangeBarcodeValues('percentageValue', e.target.value)}\r\n\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n\r\n                            <TextField\r\n                                fullWidth\r\n                                type='number'\r\n                                label=\"Value\"\r\n                                name='value'\r\n                                value={barcodeValues.value}\r\n                                onChange={(e) => handleChangeBarcodeValues('value', e.target.value)}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} display='flex' justifyContent='flex-end' gap='10px' >\r\n\r\n                            <Button variant='contained' onClick={handleSave} disabled={!barcodeValues.percentageValue || !barcodeValues.value} >\r\n                                CONFIGURE\r\n                            </Button>\r\n                            <Button variant='contained' color='error' onClick={handleClose} >\r\n                                Cancel\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Modal>\r\n\r\n\r\n            <Modal\r\n                open={barcodeModal}\r\n                onClose={handleClose}\r\n            >\r\n                <Box sx={styleForBarcode}>\r\n                    <div id=\"barcode-content\" ref={componentRef} style={{ display: 'flex', flexDirection: 'column', gap: '10px', padding: \"20px\", justifyContent: 'center', alignItems: 'center' }}>\r\n                        <Typography variant='h6'>PIX</Typography>\r\n                        <div style={{ display: 'flex', justifyContent: 'space-between', gap: '20px' }}>\r\n                            <Typography variant='body1'>{product?.productId?.name ? product?.productId?.name : 'N/A'}</Typography>\r\n                            <Typography variant='body1'>{product?.vendorId?.initials ? product?.vendorId?.initials : 'N/A'}</Typography>\r\n                        </div>\r\n                        <Barcode value={product?.barcode} />\r\n                        <Typography variant='h6'>{product?.productId?.code}</Typography>\r\n                    </div>\r\n\r\n                    <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\r\n                        <Button variant='contained' color='primary' onClick={() => {\r\n                            // const content = document.getElementById('barcode-content').innerHTML;\r\n                            // const printWindow = window.open('', '_self');\r\n                            // printWindow.document.write('<html><head><title>Print</title></head><body>');\r\n                            // printWindow.document.write(content);\r\n                            // printWindow.document.write('</body></html>');\r\n                            // printWindow.document.close();\r\n                            // printWindow.print();\r\n                            handlePrint();\r\n                        }}>Print</Button>\r\n                        <Button variant='contained' color='error' onClick={() => {\r\n                            setProduct({});\r\n                            handleBarcodeClose();\r\n                        }}>Close</Button>\r\n                    </div>\r\n                </Box>\r\n            </Modal>\r\n        </Container >\r\n    );\r\n};\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport ProductBarcodePage from 'src/sections/product-management/productBarcode';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ProductBarcode() {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title> Dashboard : Barcodes</title>\r\n            </Helmet>\r\n\r\n            <ProductBarcodePage />\r\n        </>\r\n    );\r\n}\r\n"],"names":["style","position","top","left","transform","width","bgcolor","boxShadow","borderRadius","p","styleForBarcode","ProductBarcode","_user$permissions","_user$permissions$pro","_product$productId","_product$productId2","_product$vendorId","_product$vendorId2","_product$productId3","settings","useSettingsContext","componentRef","useRef","user","useAuthContext","handlePrint","useReactToPrint","content","current","enqueueSnackbar","useSnackbar","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","searchQuery","setSearchQuery","_useState5","_useState6","open","setOpen","_useState7","_useState8","setIsLoading","_useState9","_useState10","isProductsLoading","setIsProductsLoading","_useState11","_useState12","products","setProducts","_useState13","_id","percentageValue","_useState14","barcodeValues","setBarcodeValues","_useState15","_useState16","barcodeModal","setBarcodeModal","_useState17","_useState18","product","setProduct","fetchBarcodeValues","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","decryptedToken","accessToken","response","wrap","_context","prev","next","localStorage","getItem","constants","decryptToken","axios","endpoints","headers","Authorization","concat","sent","console","log","data","Object","keys","length","t0","variant","stop","apply","arguments","handleChangeBarcodeValues","name","fieldValue","_objectSpread","_defineProperty","fetchData","_ref2","_callee2","_context2","_useState19","_useState20","anchorEl","_useState21","Boolean","_useState22","useEffect","handleClose","handleBarcodeSaveValues","_ref3","_callee3","_context3","then","res","catch","err","error","msg","handleBarcodeUpdateValues","_ref4","_callee4","_context4","productBarcodeColumns","selector","row","_row$productId","productId","sortable","barcode","updatedAt","formatDate","center","cell","_jsx","Button","color","onClick","endIcon","PrintIcon","children","filteredBarcodeProducts","filter","productBarcodeData","_productBarcodeData$b","toString","includes","_jsxs","Container","maxWidth","themeStretch","Typography","Tabs","sx","mt","onChange","event","newValue","textColor","indicatorColor","Tab","label","Box","theme","alpha","palette","grey","border","divider","Grid","container","spacing","item","xs","TextField","size","e","target","type","placeholder","InputProps","endAdornment","InputAdornment","SearchIcon","DataTable","title","columns","progressPending","pagination","fullWidth","disabled","permissions","u","Modal","display","justifyContent","gap","onClose","id","ref","flexDirection","padding","alignItems","vendorId","initials","Barcode","code","_Fragment","Helmet","ProductBarcodePage"],"sourceRoot":""}