{"version":3,"file":"static/js/950.1cd1a7df.chunk.js","mappings":"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","sources":["sections/employee/attendance.js","pages/dashboard/employee/attendance.js","../node_modules/@mui/material/ButtonGroup/ButtonGroupContext.js","../node_modules/@mui/material/Button/Button.js","../node_modules/@mui/material/DialogTitle/DialogTitle.js"],"sourcesContent":["// @mui\r\nimport { useEffect, useState } from 'react';\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\n// components\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, Grid, InputAdornment, InputLabel, Menu, MenuItem, Modal, Select, TextField } from '@mui/material';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport PhoneIcon from '@mui/icons-material/Phone';\r\nimport { color, decryptToken, states } from 'src/utils/common';\r\nimport axios, { endpoints } from 'src/utils/axios';\r\nimport { constants } from 'src/utils/constant';\r\nimport { useSnackbar } from 'src/components/snackbar';\r\nimport DataTable from 'react-data-table-component';\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '70%',\r\n    bgcolor: 'background.paper',\r\n    borderRadius: '10px',\r\n    boxShadow: 24,\r\n    p: 2,\r\n    backgroundColor: '#E6F2FF',\r\n    height: '90%',\r\n    overflow: 'auto',\r\n};\r\n\r\nconst initialCustomerData = {\r\n    id: '',\r\n    name: '',\r\n    email: '',\r\n    mobileNumber: '',\r\n    type: '',\r\n    company: {\r\n        name: '',\r\n        gstNumber: '',\r\n        billingAddress: {\r\n            line1: '',\r\n            line2: '',\r\n            city: '',\r\n            state: '',\r\n            pincode: '',\r\n        },\r\n        shippingAddress: {\r\n            line1: '',\r\n            line2: '',\r\n            city: '',\r\n            state: '',\r\n            pincode: '',\r\n        },\r\n    },\r\n};\r\n\r\nconst initialCustomerErr = {\r\n    name: false,\r\n    email: false,\r\n    mobileNumber: false,\r\n    type: false,\r\n    company: {\r\n        name: false,\r\n        gstNumber: false,\r\n        billingAddress: {\r\n            line1: false,\r\n            line2: false,\r\n            city: false,\r\n            state: false,\r\n            pincode: false,\r\n        },\r\n        shippingAddress: {\r\n            line1: false,\r\n            line2: false,\r\n            city: false,\r\n            state: false,\r\n            pincode: false,\r\n        },\r\n    },\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function CustomerView() {\r\n    const settings = useSettingsContext();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    // For Modal Open\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [customerLoading, setCustomerLoading] = useState(false);\r\n    const [customers, setCustomers] = useState([]);\r\n    const [customer, setCustomer] = useState(initialCustomerData);\r\n    const [customerErr, setCustomerErr] = useState(initialCustomerErr);\r\n    const [editUser, setEditUser] = useState(false);\r\n\r\n    // Temporary State\r\n    const [tempData, setTempData] = useState({});\r\n\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n\r\n\r\n    // For Actions Dropdown\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const openMenu = Boolean(anchorEl);\r\n\r\n\r\n    // For Delete Customer\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n        setEditUser(false);\r\n    };\r\n\r\n    const handleClose = () => setOpen(false);\r\n\r\n\r\n    const fetchData = async () => {\r\n\r\n        try {\r\n            const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n            const accessToken = decryptToken(decryptedToken);\r\n            const response = await axios.post(endpoints.customer.list, {}, {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                }\r\n            });\r\n            if (response) {\r\n                setCustomerLoading(false);\r\n                setCustomers(response.data.data);\r\n            }\r\n        } catch (err) {\r\n            enqueueSnackbar('Failed to fetch customers!', { variant: 'error' });\r\n            setCustomerLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCustomerLoading(true);\r\n        fetchData();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // You can use setFormData to update the state when user input changes\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setCustomer((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: value,\r\n        }));\r\n        \r\n    };\r\n\r\n\r\n    const handleSaveCustomer = async () => {\r\n        const newErrors = { ...initialCustomerErr };\r\n\r\n        // Example validation for each field\r\n        if (!customer.name) {\r\n            newErrors.name = true;\r\n        } else {\r\n            newErrors.name = false;\r\n        }\r\n\r\n        if (!customer.email) {\r\n            newErrors.email = true;\r\n        } else {\r\n            newErrors.email = false;\r\n        }\r\n\r\n        if (!customer.mobileNumber) {\r\n            newErrors.mobileNumber = true;\r\n        } else if (!/^[0-9]*$/.test(customer.mobileNumber) || customer.mobileNumber.length !== 10) {\r\n            newErrors.mobileNumber = true;\r\n        } else {\r\n            newErrors.mobileNumber = false;\r\n        }\r\n\r\n        if (!customer.type) {\r\n            newErrors.type = true;\r\n        } else {\r\n            newErrors.type = false;\r\n        }\r\n\r\n        // Validation for company details\r\n        if (!customer.company.name) {\r\n            newErrors.company.name = true;\r\n        } else {\r\n            newErrors.company.name = false;\r\n        }\r\n\r\n        if (!customer.company.gstNumber) {\r\n            newErrors.company.gstNumber = true;\r\n        } else if (customer.company.gstNumber.length !== 15) {\r\n            newErrors.company.gstNumber = true;\r\n        } else {\r\n            newErrors.company.gstNumber = false;\r\n        }\r\n        // Validation for billing address\r\n        const billingAddress = customer.company.billingAddress;\r\n        if (!billingAddress.line1 || !billingAddress.line2 || !billingAddress.city ||\r\n            !billingAddress.state || !billingAddress.pincode) {\r\n            // If any of the billing address fields are empty, set errors\r\n            newErrors.company.billingAddress = {\r\n                line1: !billingAddress.line1,\r\n                line2: !billingAddress.line2,\r\n                city: !billingAddress.city,\r\n                state: !billingAddress.state,\r\n                pincode: !billingAddress.pincode,\r\n            };\r\n        } else if (!/^[0-9]*$/.test(billingAddress.pincode) || billingAddress.pincode.length !== 6) {\r\n            // If pincode is not numeric, set error\r\n            newErrors.company.billingAddress.pincode = true;\r\n        } else {\r\n            // If all billing address fields are correct, clear errors\r\n            newErrors.company.billingAddress = {\r\n                line1: false,\r\n                line2: false,\r\n                city: false,\r\n                state: false,\r\n                pincode: false,\r\n            };\r\n        };\r\n\r\n        // Validation for shipping address\r\n        const shippingAddress = customer.company.shippingAddress;\r\n        if (!shippingAddress.line1 || !shippingAddress.line2 || !shippingAddress.city ||\r\n            !shippingAddress.state || !shippingAddress.pincode) {\r\n            // If any of the shipping address fields are empty, set errors\r\n            newErrors.company.shippingAddress = {\r\n                line1: !shippingAddress.line1,\r\n                line2: !shippingAddress.line2,\r\n                city: !shippingAddress.city,\r\n                state: !shippingAddress.state,\r\n                pincode: !shippingAddress.pincode,\r\n            };\r\n        } else if (!/^[0-9]*$/.test(shippingAddress.pincode) || shippingAddress.pincode.length !== 6) {\r\n            // If pincode is not numeric, set error\r\n            newErrors.company.shippingAddress.pincode = true;\r\n        } else {\r\n            // If all shipping address fields are correct, clear errors\r\n            newErrors.company.shippingAddress = {\r\n                line1: false,\r\n                line2: false,\r\n                city: false,\r\n                state: false,\r\n                pincode: false,\r\n            };\r\n        }\r\n\r\n\r\n        // Check if there are any errors\r\n        if (Object.values(newErrors).some((field) => field === true) ||\r\n            Object.values(newErrors.company.billingAddress).some((field) => field === true) ||\r\n            Object.values(newErrors.company.shippingAddress).some((field) => field === true) ||\r\n            newErrors.company.name || newErrors.company.gstNumber\r\n        ) {\r\n            // If there are errors, set the error state\r\n            setCustomerErr(newErrors);\r\n            return;\r\n        };\r\n        // If no errors, proceed with saving\r\n        const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n        const accessToken = decryptToken(decryptedToken);\r\n        axios.post(endpoints.customer.add, customer,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                }\r\n            })\r\n            .then((res) => {\r\n                enqueueSnackbar('Customer created successfully!', { variant: 'success' });\r\n                // fetchData();\r\n                handleClose();\r\n                // Reset the error state\r\n                setCustomerErr(initialCustomerErr);\r\n\r\n                // Reset the customer  state\r\n                setCustomer(initialCustomerData);\r\n\r\n                fetchData();\r\n            }).catch((err) => {\r\n                enqueueSnackbar(err.error || err.msg, { variant: 'error' });\r\n            })\r\n    };\r\n\r\n    const handleEditDetails = () => {\r\n        setEditUser(true);\r\n        setAnchorEl(null);\r\n        const customerData = {\r\n            id: tempData._id,\r\n            name: tempData.name,\r\n            email: tempData.email,\r\n            mobileNumber: tempData.mobileNumber.slice(3),\r\n            type: tempData.type,\r\n            company: {\r\n                name: tempData.company.name,\r\n                gstNumber: tempData.company.gstNumber,\r\n                billingAddress: {\r\n                    line1: tempData.company.billingAddress.line1,\r\n                    line2: tempData.company.billingAddress.line2,\r\n                    city: tempData.company.billingAddress.city,\r\n                    state: tempData.company.billingAddress.state,\r\n                    pincode: tempData.company.billingAddress.pincode,\r\n                },\r\n                shippingAddress: {\r\n                    line1: tempData.company.shippingAddress.line1,\r\n                    line2: tempData.company.shippingAddress.line2,\r\n                    city: tempData.company.shippingAddress.city,\r\n                    state: tempData.company.shippingAddress.state,\r\n                    pincode: tempData.company.shippingAddress.pincode,\r\n                },\r\n            },\r\n        };\r\n\r\n        setCustomer(customerData);\r\n        setOpen(true);\r\n\r\n    };\r\n\r\n    const handleDeleteDetails = () => {\r\n        setCustomer((prev) => ({ ...prev, id: tempData._id }));\r\n        setOpenDialog(true);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleConfirmDelete = () => {\r\n\r\n        const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n        const accessToken = decryptToken(decryptedToken);\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        };\r\n        axios.post(endpoints.customer.delete, { id: customer.id }, config)\r\n            .then((res) => {\r\n                if (res) {\r\n                    enqueueSnackbar('Customer deleted successfully!', { variant: 'success' });\r\n                    setOpenDialog(false);\r\n                    setCustomer(initialCustomerData);\r\n                    fetchData();\r\n                };\r\n            }).catch((err) => {\r\n                enqueueSnackbar(err.msg || err.error, { variant: 'error' });\r\n            })\r\n    };\r\n\r\n    const handleUpdateCustomer = async () => {\r\n        const newErrors = { ...initialCustomerErr };\r\n\r\n        // Example validation for each field\r\n        if (!customer.name) {\r\n            newErrors.name = true;\r\n        }\r\n\r\n        if (!customer.email) {\r\n            newErrors.email = true;\r\n        }\r\n\r\n        if (!customer.mobileNumber) {\r\n            newErrors.mobileNumber = true;\r\n        }\r\n\r\n        if (!customer.type) {\r\n            newErrors.type = true;\r\n        }\r\n\r\n        // Validation for company details\r\n        if (!customer.company.name) {\r\n            newErrors.company.name = true;\r\n        }\r\n\r\n        if (!customer.company.gstNumber) {\r\n            newErrors.company.gstNumber = true;\r\n        }\r\n\r\n        // Validation for billing address\r\n        if (!customer.company.billingAddress.line1) {\r\n            newErrors.company.billingAddress.line1 = true;\r\n        }\r\n\r\n        if (!customer.company.billingAddress.line2) {\r\n            newErrors.company.billingAddress.line2 = true;\r\n        }\r\n\r\n        if (!customer.company.billingAddress.city) {\r\n            newErrors.company.billingAddress.city = true;\r\n        }\r\n\r\n        if (!customer.company.billingAddress.state) {\r\n            newErrors.company.billingAddress.state = true;\r\n        }\r\n\r\n        if (!customer.company.billingAddress.pincode) {\r\n            newErrors.company.billingAddress.pincode = true;\r\n        }\r\n\r\n        // Validation for shipping address\r\n        if (!customer.company.shippingAddress.line1) {\r\n            newErrors.company.shippingAddress.line1 = true;\r\n        }\r\n\r\n        if (!customer.company.shippingAddress.line2) {\r\n            newErrors.company.shippingAddress.line2 = true;\r\n        }\r\n\r\n        if (!customer.company.shippingAddress.city) {\r\n            newErrors.company.shippingAddress.city = true;\r\n        }\r\n\r\n        if (!customer.company.shippingAddress.state) {\r\n            newErrors.company.shippingAddress.state = true;\r\n        }\r\n\r\n        if (!customer.company.shippingAddress.pincode) {\r\n            newErrors.company.shippingAddress.pincode = true;\r\n        }\r\n\r\n        // Check if there are any errors\r\n        if (Object.values(newErrors).some((field) => field === true)) {\r\n            // If there are errors, set the error state\r\n            setCustomerErr(newErrors);\r\n        } else {\r\n            // If no errors, proceed with saving\r\n\r\n            const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n            const accessToken = decryptToken(decryptedToken);\r\n            axios.post(endpoints.customer.update, customer,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${accessToken}`,\r\n                    }\r\n                })\r\n                .then((res) => {\r\n                    enqueueSnackbar('Customer updated successfully!', { variant: 'success' });\r\n                    // fetchData();\r\n                    handleClose();\r\n                    // Reset the error state\r\n                    setCustomerErr(initialCustomerErr);\r\n\r\n                    // Reset the customer  state\r\n                    setCustomer(initialCustomerData);\r\n\r\n                    fetchData();\r\n                }).catch((err) => {\r\n                    enqueueSnackbar(err.error || err.msg, { variant: 'error' });\r\n                })\r\n\r\n\r\n\r\n        }\r\n    };\r\n\r\n    const customerColumns = [\r\n        {\r\n            name: 'Name',\r\n            selector: row => row.name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Company Name',\r\n            selector: row => row.company.name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Email Address',\r\n            selector: row => row.email,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Contact Number',\r\n            selector: row => row.mobileNumber,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'GST Number',\r\n            selector: row => row.company.gstNumber,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Actions',\r\n            cell: (row) => (\r\n                <>\r\n                    <Button onClick={(event) => {\r\n                        setAnchorEl(event.currentTarget);\r\n                        setTempData(row)\r\n                    }} style={{ color: color.actionButton }} variant='outlined' endIcon={<ArrowDropDownIcon />}>Action</Button>\r\n                    <Menu\r\n                        id=\"basic-menu\"\r\n                        anchorEl={anchorEl}\r\n                        open={openMenu}\r\n                        onClose={() => {\r\n                            setAnchorEl(null);\r\n                            setTempData({});\r\n                        }}\r\n                        MenuListProps={{\r\n                            'aria-labelledby': 'basic-button',\r\n                        }}\r\n                    >\r\n                        <MenuItem onClick={() => handleEditDetails()}>Edit Details</MenuItem>\r\n                        <MenuItem onClick={() => handleDeleteDetails()}>Remove</MenuItem>\r\n                    </Menu>\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const filteredCustomers = customers.filter((custData) =>\r\n        custData?.name?.toLowerCase().includes(searchQuery?.toLowerCase())\r\n    );\r\n\r\n    return (\r\n        <Container maxWidth={settings.themeStretch ? false : 'xl'}>\r\n            <Typography variant=\"h4\"> Employee Attendance </Typography>\r\n\r\n            {/* <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: '20px' }}>\r\n                <TextField\r\n                    size=\"small\"\r\n                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <SearchIcon />\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                <Button startIcon={<AddIcon />} color='primary' variant='contained' onClick={handleOpen}>\r\n                    ADD CUSTOMER\r\n                </Button>\r\n            </div> */}\r\n\r\n            {/* <Modal\r\n                open={open}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n\r\n                        <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                            Basic Details\r\n                        </Typography>\r\n                        <div style={{ padding: \"10px\", backgroundColor: 'white', borderRadius: '10px' }}>\r\n                            <Grid container spacing={2} >\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label='Name'\r\n                                        name='name'\r\n                                        value={customer.name}\r\n                                        onChange={handleChange}\r\n                                        error={customerErr.name}\r\n                                        helperText={customerErr.name ? 'Invalid customer name!..' : null}\r\n                                        fullWidth\r\n                                        required />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label='Email'\r\n                                        name='email'\r\n                                        value={customer.email}\r\n                                        onChange={handleChange}\r\n                                        error={customerErr.email}\r\n                                        helperText={customerErr.email ? 'Invalid customer email!..' : null}\r\n                                        fullWidth\r\n                                        required />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label=\"Mobile Number\"\r\n                                        name=\"mobileNumber\"\r\n                                        value={customer.mobileNumber}\r\n                                        onChange={handleChange}\r\n                                        error={customerErr.mobileNumber}\r\n                                        helperText={customerErr.mobileNumber ? 'Invalid customer mobile number!..' : null}\r\n                                        fullWidth\r\n                                        required\r\n                                        inputProps={{\r\n                                            maxLength: 10,\r\n                                        }}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                                <InputAdornment position=\"start\">\r\n                                                    <PhoneIcon /> +91\r\n                                                </InputAdornment>\r\n                                            )\r\n                                        }}\r\n                                    />\r\n\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <InputLabel id=\"demo-simple-select-label\">Type</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"demo-simple-select-label\"\r\n                                            id=\"demo-simple-select\"\r\n                                            value={customer.type}\r\n                                            label=\"Type\"\r\n                                            name='type'\r\n                                            onChange={handleChange}\r\n                                            error={customerErr.type}\r\n                                        >\r\n                                            <MenuItem value='TAXABLE'>Taxable</MenuItem>\r\n                                            <MenuItem value='EXEMPTED'>Exempted</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </div>\r\n                        <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                            Company Details\r\n                        </Typography>\r\n\r\n                        <div style={{ padding: \"10px\", backgroundColor: 'white', borderRadius: '10px' }}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label='Company Name'\r\n                                        fullWidth\r\n                                        value={customer.company.name}\r\n                                        error={customerErr.company.name}\r\n                                        helperText={customerErr.company.name ? 'Invalid company name!..' : null}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.name = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    name: false\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label='GST Number'\r\n                                        fullWidth\r\n                                        error={customerErr.company.gstNumber}\r\n                                        helperText={customerErr.company.gstNumber ? 'Invalid company name!..' : null}\r\n                                        value={customer.company.gstNumber}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.gstNumber = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    gstNumber: false\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        inputProps={{\r\n                                            maxLength: 15,\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </div>\r\n\r\n\r\n                        <div style={{ padding: \"10px\", backgroundColor: 'white', borderRadius: '10px' }}>\r\n                            <Grid container spacing={2} >\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='h6'>Billing Address</Typography>\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='Address Line 1'\r\n                                        error={customerErr.company.billingAddress.line1}\r\n                                        helperText={customerErr.company.billingAddress.line1 ? 'Invalid line1 address!..' : null}\r\n                                        value={customer.company.billingAddress.line1}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.billingAddress.line1 = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    billingAddress: {\r\n                                                        ...prev.company.billingAddress,\r\n                                                        line1: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='Address Line 2'\r\n                                        error={customerErr.company.billingAddress.line2}\r\n                                        helperText={customerErr.company.billingAddress.line2 ? 'Invalid line2 address!..' : null}\r\n                                        value={customer.company.billingAddress.line2}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.billingAddress.line2 = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    billingAddress: {\r\n                                                        ...prev.company.billingAddress,\r\n                                                        line2: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='City'\r\n                                        error={customerErr.company.billingAddress.city}\r\n                                        helperText={customerErr.company.billingAddress.city ? 'Invalid city name!..' : null}\r\n                                        value={customer.company.billingAddress.city}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.billingAddress.city = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    billingAddress: {\r\n                                                        ...prev.company.billingAddress,\r\n                                                        city: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <InputLabel id=\"demo-simple-select-label\">Select State</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"demo-simple-select-label\"\r\n                                            error={customerErr.company.billingAddress.state}\r\n                                            id=\"demo-simple-select\"\r\n                                            value={customer.company.billingAddress.state}\r\n                                            onChange={(e) => {\r\n                                                const prevCustomer = { ...customer };\r\n                                                customer.company.billingAddress.state = e.target.value;\r\n                                                setCustomer(prevCustomer);\r\n                                                setCustomerErr((prev) => ({\r\n                                                    ...prev, company: {\r\n                                                        ...prev.company,\r\n                                                        billingAddress: {\r\n                                                            ...prev.company.billingAddress,\r\n                                                            state: false\r\n                                                        }\r\n                                                    }\r\n                                                }))\r\n                                            }}\r\n                                            label=\"Select State\"\r\n                                        >\r\n                                            {\r\n                                                states.map((state, index) => (\r\n                                                    <MenuItem key={index} value={state}>{state}</MenuItem>\r\n                                                ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label=\"Pincode\"\r\n                                        name=\"pincode\"\r\n                                        value={customer.company.billingAddress.pincode}\r\n                                        error={customerErr.company.billingAddress.pincode}\r\n                                        helperText={customerErr.company.billingAddress.pincode ? 'Invalid pincode!..' : null}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.billingAddress.pincode = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    billingAddress: {\r\n                                                        ...prev.company.billingAddress,\r\n                                                        pincode: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }\r\n                                        }\r\n                                        fullWidth\r\n                                        required\r\n                                        inputProps={{\r\n                                            maxLength: 6, // Set maximum length to 4 characters\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                        <div style={{ padding: \"10px\", backgroundColor: 'white', borderRadius: '10px' }}>\r\n                            <Grid container spacing={2} >\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='h6'>Shipping Address</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='Address Line 1'\r\n                                        error={customerErr.company.shippingAddress.line1}\r\n                                        helperText={customerErr.company.shippingAddress.line1 ? 'Invalid line1 address!..' : null}\r\n                                        value={customer.company.shippingAddress.line1}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.shippingAddress.line1 = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    shippingAddress: {\r\n                                                        ...prev.company.shippingAddress,\r\n                                                        line1: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='Address Line 2'\r\n                                        error={customerErr.company.shippingAddress.line2}\r\n                                        helperText={customerErr.company.shippingAddress.line2 ? 'Invalid line2 address!..' : null}\r\n                                        value={customer.company.shippingAddress.line2}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.shippingAddress.line2 = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    shippingAddress: {\r\n                                                        ...prev.company.shippingAddress,\r\n                                                        line2: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='City'\r\n                                        error={customerErr.company.shippingAddress.city}\r\n                                        helperText={customerErr.company.shippingAddress.city ? 'Invalid city name!..' : null}\r\n                                        value={customer.company.shippingAddress.city}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.shippingAddress.city = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    shippingAddress: {\r\n                                                        ...prev.company.shippingAddress,\r\n                                                        city: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <InputLabel id=\"demo-simple-select-label\">Select State</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"demo-simple-select-label\"\r\n                                            error={customerErr.company.shippingAddress.state}\r\n                                            id=\"demo-simple-select\"\r\n                                            value={customer.company.shippingAddress.state}\r\n                                            onChange={(e) => {\r\n                                                const prevCustomer = { ...customer };\r\n                                                customer.company.shippingAddress.state = e.target.value;\r\n                                                setCustomer(prevCustomer);\r\n                                                setCustomerErr((prev) => ({\r\n                                                    ...prev, company: {\r\n                                                        ...prev.company,\r\n                                                        shippingAddress: {\r\n                                                            ...prev.company.shippingAddress,\r\n                                                            state: false\r\n                                                        }\r\n                                                    }\r\n                                                }))\r\n                                            }}\r\n                                            label=\"Select State\"\r\n                                        >\r\n                                            {\r\n                                                states.map((state, index) => (\r\n                                                    <MenuItem key={index} value={state}>{state}</MenuItem>\r\n                                                ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label=\"Pincode\"\r\n                                        name=\"pincode\"\r\n                                        value={customer.company.shippingAddress.pincode}\r\n                                        error={customerErr.company.shippingAddress.pincode}\r\n                                        helperText={customerErr.company.shippingAddress.pincode ? 'Invalid pincode!..' : null}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.shippingAddress.pincode = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    shippingAddress: {\r\n                                                        ...prev.company.shippingAddress,\r\n                                                        pincode: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }\r\n                                        }\r\n                                        fullWidth\r\n                                        required\r\n                                        inputProps={{\r\n                                            maxLength: 6, // Set maximum length to 4 characters\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div style={{ display: 'flex', flexDirection: 'row', gap: '10px', justifyContent: 'flex-end', padding: \"10px\" }}>\r\n                        <Button variant='contained' color='primary' onClick={editUser ? handleUpdateCustomer : handleSaveCustomer}>\r\n                            {editUser ? 'Update' : 'Save'}\r\n                        </Button>\r\n                        <Button variant='outlined' onClick={() => {\r\n                            setCustomerErr(initialCustomerErr);\r\n                            if (editUser) {\r\n                                setCustomer(initialCustomerData);\r\n                                setEditUser(false);\r\n                            };\r\n                            setOpen(false);\r\n                            setTempData({});\r\n                        }}>\r\n                            Cancel\r\n                        </Button>\r\n                    </div>\r\n                </Box>\r\n\r\n            </Modal>\r\n\r\n            <div style={{ marginTop: \"20px\" }}>\r\n                <DataTable\r\n                    columns={customerColumns}\r\n                    data={filteredCustomers}\r\n                    pagination\r\n                    progressPending={customerLoading}\r\n                />\r\n            </div> */}\r\n\r\n\r\n            {/* Dialog For Delete */}\r\n            <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n                <DialogTitle>Remove Customer</DialogTitle>\r\n                <DialogContent>\r\n                    Are you sure you want to delete this customer?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n                    <Button onClick={handleConfirmDelete} variant=\"contained\" color=\"error\">\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Container>\r\n    );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport EmployeeAttendanceView from 'src/sections/employee/attendance';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Page() {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title> Dashboard : Employee Attendance</title>\r\n            </Helmet>\r\n\r\n            <EmployeeAttendanceView />\r\n        </>\r\n    );\r\n}\r\n","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst ButtonGroupContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  ButtonGroupContext.displayName = 'ButtonGroupContext';\n}\nexport default ButtonGroupContext;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"color\", \"component\", \"className\", \"disabled\", \"disableElevation\", \"disableFocusRipple\", \"endIcon\", \"focusVisibleClassName\", \"fullWidth\", \"size\", \"startIcon\", \"type\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { internal_resolveProps as resolveProps } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nimport buttonClasses, { getButtonUtilityClass } from './buttonClasses';\nimport ButtonGroupContext from '../ButtonGroup/ButtonGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    color,\n    disableElevation,\n    fullWidth,\n    size,\n    variant,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, `${variant}${capitalize(color)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],\n    label: ['label'],\n    startIcon: ['startIcon', `iconSize${capitalize(size)}`],\n    endIcon: ['endIcon', `iconSize${capitalize(size)}`]\n  };\n  const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\nconst commonIconStyles = ownerState => _extends({}, ownerState.size === 'small' && {\n  '& > *:nth-of-type(1)': {\n    fontSize: 18\n  }\n}, ownerState.size === 'medium' && {\n  '& > *:nth-of-type(1)': {\n    fontSize: 20\n  }\n}, ownerState.size === 'large' && {\n  '& > *:nth-of-type(1)': {\n    fontSize: 22\n  }\n});\nconst ButtonRoot = styled(ButtonBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color)}`], styles[`size${capitalize(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  var _theme$palette$getCon, _theme$palette;\n  const inheritContainedBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey[300] : theme.palette.grey[800];\n  const inheritContainedHoverBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey.A100 : theme.palette.grey[700];\n  return _extends({}, theme.typography.button, {\n    minWidth: 64,\n    padding: '6px 16px',\n    borderRadius: (theme.vars || theme).shape.borderRadius,\n    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {\n      duration: theme.transitions.duration.short\n    }),\n    '&:hover': _extends({\n      textDecoration: 'none',\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {\n      border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }, ownerState.variant === 'contained' && {\n      backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,\n      boxShadow: (theme.vars || theme).shadows[4],\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        boxShadow: (theme.vars || theme).shadows[2],\n        backgroundColor: (theme.vars || theme).palette.grey[300]\n      }\n    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {\n      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: (theme.vars || theme).palette[ownerState.color].main\n      }\n    }),\n    '&:active': _extends({}, ownerState.variant === 'contained' && {\n      boxShadow: (theme.vars || theme).shadows[8]\n    }),\n    [`&.${buttonClasses.focusVisible}`]: _extends({}, ownerState.variant === 'contained' && {\n      boxShadow: (theme.vars || theme).shadows[6]\n    }),\n    [`&.${buttonClasses.disabled}`]: _extends({\n      color: (theme.vars || theme).palette.action.disabled\n    }, ownerState.variant === 'outlined' && {\n      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`\n    }, ownerState.variant === 'contained' && {\n      color: (theme.vars || theme).palette.action.disabled,\n      boxShadow: (theme.vars || theme).shadows[0],\n      backgroundColor: (theme.vars || theme).palette.action.disabledBackground\n    })\n  }, ownerState.variant === 'text' && {\n    padding: '6px 8px'\n  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  }, ownerState.variant === 'outlined' && {\n    padding: '5px 15px',\n    border: '1px solid currentColor'\n  }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {\n    color: (theme.vars || theme).palette[ownerState.color].main,\n    border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`\n  }, ownerState.variant === 'contained' && {\n    color: theme.vars ?\n    // this is safe because grey does not change between default light/dark mode\n    theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),\n    backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,\n    boxShadow: (theme.vars || theme).shadows[2]\n  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {\n    color: (theme.vars || theme).palette[ownerState.color].contrastText,\n    backgroundColor: (theme.vars || theme).palette[ownerState.color].main\n  }, ownerState.color === 'inherit' && {\n    color: 'inherit',\n    borderColor: 'currentColor'\n  }, ownerState.size === 'small' && ownerState.variant === 'text' && {\n    padding: '4px 5px',\n    fontSize: theme.typography.pxToRem(13)\n  }, ownerState.size === 'large' && ownerState.variant === 'text' && {\n    padding: '8px 11px',\n    fontSize: theme.typography.pxToRem(15)\n  }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {\n    padding: '3px 9px',\n    fontSize: theme.typography.pxToRem(13)\n  }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {\n    padding: '7px 21px',\n    fontSize: theme.typography.pxToRem(15)\n  }, ownerState.size === 'small' && ownerState.variant === 'contained' && {\n    padding: '4px 10px',\n    fontSize: theme.typography.pxToRem(13)\n  }, ownerState.size === 'large' && ownerState.variant === 'contained' && {\n    padding: '8px 22px',\n    fontSize: theme.typography.pxToRem(15)\n  }, ownerState.fullWidth && {\n    width: '100%'\n  });\n}, ({\n  ownerState\n}) => ownerState.disableElevation && {\n  boxShadow: 'none',\n  '&:hover': {\n    boxShadow: 'none'\n  },\n  [`&.${buttonClasses.focusVisible}`]: {\n    boxShadow: 'none'\n  },\n  '&:active': {\n    boxShadow: 'none'\n  },\n  [`&.${buttonClasses.disabled}`]: {\n    boxShadow: 'none'\n  }\n});\nconst ButtonStartIcon = styled('span', {\n  name: 'MuiButton',\n  slot: 'StartIcon',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.startIcon, styles[`iconSize${capitalize(ownerState.size)}`]];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'inherit',\n  marginRight: 8,\n  marginLeft: -4\n}, ownerState.size === 'small' && {\n  marginLeft: -2\n}, commonIconStyles(ownerState)));\nconst ButtonEndIcon = styled('span', {\n  name: 'MuiButton',\n  slot: 'EndIcon',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.endIcon, styles[`iconSize${capitalize(ownerState.size)}`]];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'inherit',\n  marginRight: -4,\n  marginLeft: 8\n}, ownerState.size === 'small' && {\n  marginRight: -2\n}, commonIconStyles(ownerState)));\nconst Button = /*#__PURE__*/React.forwardRef(function Button(inProps, ref) {\n  // props priority: `inProps` > `contextProps` > `themeDefaultProps`\n  const contextProps = React.useContext(ButtonGroupContext);\n  const resolvedProps = resolveProps(contextProps, inProps);\n  const props = useThemeProps({\n    props: resolvedProps,\n    name: 'MuiButton'\n  });\n  const {\n      children,\n      color = 'primary',\n      component = 'button',\n      className,\n      disabled = false,\n      disableElevation = false,\n      disableFocusRipple = false,\n      endIcon: endIconProp,\n      focusVisibleClassName,\n      fullWidth = false,\n      size = 'medium',\n      startIcon: startIconProp,\n      type,\n      variant = 'text'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    disabled,\n    disableElevation,\n    disableFocusRipple,\n    fullWidth,\n    size,\n    type,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  const startIcon = startIconProp && /*#__PURE__*/_jsx(ButtonStartIcon, {\n    className: classes.startIcon,\n    ownerState: ownerState,\n    children: startIconProp\n  });\n  const endIcon = endIconProp && /*#__PURE__*/_jsx(ButtonEndIcon, {\n    className: classes.endIcon,\n    ownerState: ownerState,\n    children: endIconProp\n  });\n  return /*#__PURE__*/_jsxs(ButtonRoot, _extends({\n    ownerState: ownerState,\n    className: clsx(contextProps.className, classes.root, className),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ref: ref,\n    type: type\n  }, other, {\n    classes: classes,\n    children: [startIcon, children, endIcon]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Button.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'success', 'error', 'info', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, no elevation is used.\n   * @default false\n   */\n  disableElevation: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * Element placed after the children.\n   */\n  endIcon: PropTypes.node,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * If `true`, the button will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href: PropTypes.string,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * Element placed before the children.\n   */\n  startIcon: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * @ignore\n   */\n  type: PropTypes.oneOfType([PropTypes.oneOf(['button', 'reset', 'submit']), PropTypes.string]),\n  /**\n   * The variant to use.\n   * @default 'text'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['contained', 'outlined', 'text']), PropTypes.string])\n} : void 0;\nexport default Button;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;"],"names":["initialCustomerData","id","name","email","mobileNumber","type","company","gstNumber","billingAddress","line1","line2","city","state","pincode","shippingAddress","initialCustomerErr","CustomerView","settings","useSettingsContext","enqueueSnackbar","useSnackbar","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","setCustomerLoading","_useState5","_useState6","customers","setCustomers","_useState7","_useState8","customer","setCustomer","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","searchQuery","_useState17","_useState18","anchorEl","_useState19","Boolean","_useState20","openDialog","setOpenDialog","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","decryptedToken","accessToken","response","wrap","_context","prev","next","localStorage","getItem","constants","decryptToken","axios","endpoints","headers","Authorization","concat","sent","data","t0","variant","stop","apply","arguments","useEffect","filter","custData","_custData$name","toLowerCase","includes","_jsxs","Container","maxWidth","themeStretch","children","_jsx","Typography","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","Button","onClick","config","then","res","catch","err","msg","error","color","Page","_Fragment","Helmet","EmployeeAttendanceView","React","_excluded","commonIconStyles","ownerState","_extends","size","fontSize","ButtonRoot","styled","ButtonBase","shouldForwardProp","prop","rootShouldForwardProp","slot","overridesResolver","props","styles","root","capitalize","colorInherit","disableElevation","fullWidth","_extends2","_theme$palette$getCon","_theme$palette","theme","inheritContainedBackgroundColor","palette","mode","grey","inheritContainedHoverBackgroundColor","A100","typography","button","minWidth","padding","borderRadius","vars","shape","transition","transitions","create","duration","short","textDecoration","backgroundColor","text","primaryChannel","action","hoverOpacity","alpha","primary","mainChannel","main","border","inheritContainedHoverBg","boxShadow","shadows","dark","_defineProperty","buttonClasses","disabled","disabledBackground","getContrastText","call","inheritContainedBg","contrastText","borderColor","pxToRem","width","_ref2","_ref3","ButtonStartIcon","startIcon","_ref4","display","marginRight","marginLeft","ButtonEndIcon","endIcon","_ref5","inProps","ref","contextProps","ButtonGroupContext","resolvedProps","resolveProps","useThemeProps","_props$color","_props$component","component","className","_props$disabled","_props$disableElevati","_props$disableFocusRi","disableFocusRipple","endIconProp","focusVisibleClassName","_props$fullWidth","_props$size","startIconProp","_props$variant","other","_objectWithoutPropertiesLoose","classes","slots","label","composedClasses","composeClasses","getButtonUtilityClass","useUtilityClasses","clsx","focusRipple","focusVisible","DialogTitleRoot","flex","idProp","getDialogTitleUtilityClass","_React$useContext$tit","DialogContext","titleId"],"sourceRoot":""}