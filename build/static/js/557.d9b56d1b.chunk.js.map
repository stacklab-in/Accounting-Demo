{"version":3,"file":"static/js/557.d9b56d1b.chunk.js","mappings":"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","sources":["pages/auth/jwt/register.js","components/hook-form/form-provider.js","sections/auth/jwt/jwt-login-view.js","sections/auth/jwt/jwt-register-view.js"],"sourcesContent":["import { Box } from '@mui/material';\nimport { Helmet } from 'react-helmet-async';\nimport Logo from 'src/components/logo/logo';\n// sections\nimport { JwtRegisterView } from 'src/sections/auth/jwt';\n\n// ----------------------------------------------------------------------\n\nexport default function RegisterPage() {\n  return (\n    <>\n      <Helmet>\n        <title> Jwt: Register</title>\n      </Helmet>\n\n     \n\n      <JwtRegisterView />\n    </>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { FormProvider as Form } from 'react-hook-form';\n\n// ----------------------------------------------------------------------\n\nexport default function FormProvider({ children, onSubmit, methods }) {\n  return (\n    <Form {...methods}>\n      <form onSubmit={onSubmit}>{children}</form>\n    </Form>\n  );\n}\n\nFormProvider.propTypes = {\n  children: PropTypes.node,\n  methods: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Alert from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport InputAdornment from '@mui/material/InputAdornment';\n// routes\nimport { paths } from 'src/routes/paths';\nimport { RouterLink } from 'src/routes/components';\nimport { useSearchParams, useRouter } from 'src/routes/hook';\n// config\nimport { PATH_AFTER_LOGIN } from 'src/config-global';\n// hooks\nimport { useBoolean } from 'src/hooks/use-boolean';\n// auth\nimport { useAuthContext } from 'src/auth/hooks';\n// components\nimport Iconify from 'src/components/iconify';\nimport FormProvider from 'src/components/hook-form';\nimport { TextField } from '@mui/material';\nimport axios, { endpoints } from 'src/utils/axios';\nimport { decryptToken, encryptToken } from 'src/utils/common';\nimport { constants } from 'src/utils/constant';\nimport { useSnackbar } from 'src/components/snackbar'\nimport { jwtDecode } from 'src/auth/context/jwt/utils';\n\n// ----------------------------------------------------------------------\n\nexport default function JwtLoginView() {\n  const { login } = useAuthContext();\n  const router = useRouter();\n\n  const [errorMsg, setErrorMsg] = useState('');\n  const searchParams = useSearchParams();\n\n\n  // State for login state\n  const [loginState, setLoginState] = useState({\n    email: 'adminuser@test.in',\n    password: 'defaultPassword',\n    emailErr: false,\n    passErr: false\n  });\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const password = useBoolean();\n\n  const handleLogin = async () => {\n\n    const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/\n    if (loginState.email.length === 0 || !re.test(loginState.email)) {\n      setLoginState((prev) => ({ ...prev, emailErr: true }));\n      return;\n    }\n    setLoginState((prev) => ({ ...prev, emailErr: false }));\n\n    if (loginState.password.length === 0) {\n      setLoginState((prev) => ({ ...prev, passErr: true }));\n      return;\n    };\n\n    setLoginState((prev) => ({ ...prev, passErr: false }));\n\n    try {\n      setIsSubmitting(true);\n\n\n      // const apiResponse = await axios.post(endpoints.auth.login, {\n      //   email: loginState.email,\n      //   password: loginState.password,\n      // });\n      setIsSubmitting(false);\n      await login?.(loginState.email, loginState.password);\n\n      // if (apiResponse) {\n\n\n\n      // SET TOKEN\n      // const encryptedToken = encryptToken(apiResponse.data.data.token);\n      // localStorage.setItem(constants.keyUserToken, encryptedToken);\n\n      // SET AXIOS HEADER\n      // axios.defaults.headers.common.Authorization = `Bearer ${apiResponse.data.data.token}`;\n      // setIsSubmitting(false);\n\n      // Go TO DASHBOARD\n      // router.push('/dashboard');\n\n      // };\n\n    } catch (error) {\n      setIsSubmitting(false);\n      enqueueSnackbar(error.error, { variant: \"error\" })\n    }\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem(constants.keyUserToken);\n    if (token) {\n      const decrypted = decryptToken(token);\n\n      if (decrypted) {\n\n        const decodedToken = jwtDecode(decrypted);\n        const currentTimestamp = Math.floor(Date.now() / 1000);\n\n        if (decodedToken.exp && decodedToken.exp < currentTimestamp) {\n\n          // Token is expired, clear token and redirect to login page\n          localStorage.clear();\n\n          // Display a message\n          alert(\"Your session has expired. Please log in again.\");\n\n          // Redirect to '/login';\n          window.location.href = '/';\n\n        } else {\n          router.push('/dashboard');\n        }\n      }\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n\n  const renderHead = (\n    <Stack spacing={2} sx={{ mb: 5 }}>\n      <Typography variant=\"h4\">Sign in to Accounting Software</Typography>\n\n      {/* <Stack direction=\"row\" spacing={0.5}>\n        <Typography variant=\"body2\">New user?</Typography>\n\n        <Link component={RouterLink} href={paths.auth.jwt.register} variant=\"subtitle2\">\n          Create an account\n        </Link>\n      </Stack> */}\n    </Stack>\n  );\n\n  const renderForm = (\n    <Stack spacing={2.5}>\n      {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\n\n      <TextField\n        name=\"email\"\n        label=\"Email address\"\n        value={loginState.email}\n        onChange={(e) => {\n          setLoginState((prev) => ({ ...prev, email: e.target.value, emailErr: false }));\n        }}\n        error={loginState.emailErr}\n        helperText={loginState.emailErr ? 'Please enter valid email!' : null}\n      />\n\n      <TextField\n        name=\"password\"\n        label=\"Password\"\n        type={password.value ? 'text' : 'password'}\n        value={loginState.password}\n        onChange={(e) => {\n          setLoginState((prev) => ({ ...prev, password: e.target.value, passErr: false }))\n        }}\n        error={loginState.passErr}\n        helperText={loginState.passErr ? 'Please enter valid password!' : null}\n\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={password.onToggle} edge=\"end\">\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n      />\n\n      <LoadingButton\n        fullWidth\n        color=\"inherit\"\n        size=\"large\"\n        variant=\"contained\"\n        loading={isSubmitting}\n        onClick={handleLogin}\n      >\n        Login\n      </LoadingButton>\n    </Stack>\n  );\n\n  return (\n    <FormProvider>\n      {renderHead}\n\n      {/* <Alert severity=\"info\" sx={{ mb: 3 }}>\n        Use email : <strong>demo@minimals.cc</strong> / password :<strong> demo1234</strong>\n      </Alert> */}\n\n      {renderForm}\n    </FormProvider>\n  );\n}\n","import * as Yup from 'yup';\nimport { useState } from 'react';\n// @mui\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Link from '@mui/material/Link';\nimport Alert from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport InputAdornment from '@mui/material/InputAdornment';\n// hooks\nimport { useBoolean } from 'src/hooks/use-boolean';\n// routes\nimport { paths } from 'src/routes/paths';\nimport { RouterLink } from 'src/routes/components';\nimport { useSearchParams, useRouter } from 'src/routes/hook';\n// config\nimport { PATH_AFTER_LOGIN } from 'src/config-global';\n// auth\nimport { useAuthContext } from 'src/auth/hooks';\n// components\nimport Iconify from 'src/components/iconify';\nimport { Box, TextField } from '@mui/material';\nimport axios, { endpoints } from 'src/utils/axios';\n\n// ----------------------------------------------------------------------\n\nexport default function JwtRegisterView() {\n  const { register } = useAuthContext();\n\n  const router = useRouter();\n\n  const [errorMsg, setErrorMsg] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const searchParams = useSearchParams();\n\n\n  const nameValue = searchParams.get('name');\n  const emailValue = searchParams.get('email');\n  const uuidValue = searchParams.get('uuid');\n\n  // Split the full name into an array of first and last name\n  const nameParts = nameValue.split(\" \");\n\n  const password = useBoolean();\n\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().required('First name required'),\n    lastName: Yup.string().required('Last name required'),\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\n    password: Yup.string()\n      .required('Password is required')\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n        'Password must contain at least 8 characters, 1 number, 1 symbol, 1 uppercase letter, and 1 lowercase letter'\n      ),\n  });\n\n\n  const defaultValues = {\n    firstName: nameParts[0],\n    lastName: nameParts[nameParts.length - 1],\n    email: emailValue,\n    password: '',\n    confirmPassword: ''\n  };\n\n  const [user, setUser] = useState(defaultValues)\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setUser((prevUser) => ({\n      ...prevUser,\n      [name]: value,\n    }));\n  };\n\n  const handleRegister = async () => {\n    setIsSubmitting(true);\n\n    try {\n      //  Validate the schema \n      await RegisterSchema.validate(user, { abortEarly: false });\n      setErrorMsg('');\n\n      const response = await axios.post(endpoints.auth.passwordTable.details, { email: user.email });\n\n      if (response.data.data) {\n        const { uuidCode, expiryDate } = response.data.data;\n        const expiryDateUTC = new Date(expiryDate); // Convert UTC string to Date object\n        const currentDate = new Date(); // Current date\n\n        if (uuidCode === uuidValue && expiryDateUTC > currentDate) {\n          // console.log('All Right you can login now');\n          // Add your registration logic here\n          await register?.(user.email, user.password, user.firstName, user.lastName);\n          router.push(PATH_AFTER_LOGIN);\n        } else {\n          setErrorMsg('The link is expired');\n        }\n      } else {\n        setErrorMsg('The link is expired');\n      }\n    } catch (error) {\n      // console.error(error);\n      if (error.errors && error.errors.length > 0) {\n        setErrorMsg(error.errors[0]);\n      } else {\n        setErrorMsg(typeof error === 'string' ? error : error.error);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const renderForm = (\n    <div>\n      {!!errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\n\n      {/* <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}> */}\n      <TextField\n        name=\"firstName\"\n        label=\"First name\"\n        fullWidth\n        value={user.firstName}\n        onChange={handleChange}\n        sx={{ mt: 4, backgroundColor: 'white' }}\n        required\n      />\n      <TextField\n        name=\"lastName\"\n        label=\"Last name\"\n        fullWidth\n        value={user.lastName}\n        onChange={handleChange}\n        sx={{ mt: 4, backgroundColor: 'white' }}\n        required\n      />\n      <TextField\n        name=\"email\"\n        label=\"Email address\"\n        fullWidth\n        value={user.email}\n        onChange={handleChange}\n        sx={{ mt: 4, backgroundColor: 'white' }}\n        required\n      />\n      <TextField\n        name=\"password\"\n        label=\"Password\"\n        fullWidth\n        type='password'\n        value={user.password}\n        onChange={handleChange}\n        sx={{ mt: 4, backgroundColor: 'white' }}\n        required\n      />\n      <Typography sx={{ mb: 2.5 }} variant=\"caption\" display=\"block\" gutterBottom>At least 8 characters, 1 number, 1 symbol, 1 upper case and lower case</Typography>\n      <TextField\n        name=\"confirmPassword\"\n        label=\"Confirm Password\"\n        fullWidth\n        value={user.confirmPassword}\n        onChange={handleChange}\n        required\n        type={password.value ? 'text' : 'password'}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton onClick={password.onToggle} edge=\"end\">\n                <Iconify icon={password.value ? 'solar:eye-bold' : 'solar:eye-closed-bold'} />\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n        sx={{ backgroundColor: 'white' }}\n      />\n      <LoadingButton\n        fullWidth\n        color=\"primary\"\n        sx={{ mt: 4, borderRadius: \"18px\" }}\n        size=\"large\"\n        variant=\"contained\"\n        disabled={\n          user.firstName === '' ||\n          user.lastName === '' ||\n          user.email === '' ||\n          user.password === '' ||\n          user.confirmPassword === ''\n        }\n        loading={isSubmitting}\n        onClick={handleRegister}\n      >\n        SIGN UP NOW\n      </LoadingButton>\n      <Stack direction=\"row\" spacing={0.5} justifyContent='center'>\n        <Typography variant=\"body2\"> Already have an account? </Typography>\n\n        <Link href={paths.auth.jwt.login} component={RouterLink} variant=\"subtitle2\" color='#074DFF'>\n          SIGN IN\n        </Link>\n      </Stack>\n    </div >\n  );\n\n  return (\n    <div style={{ backgroundColor: \"#F3F8FB\", display: 'flex', alignItems: 'center', flexDirection: 'column', width: '100vw', height: '800px', gap: '30px' }}>\n      {/* {renderHead} */}\n\n      <div style={{ width: '600px', }}>\n\n        <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '30px' }}>\n\n          <Box\n            component=\"img\"\n            src=\"/logo/logo_single.svg\"\n            sx={{ width: 120, height: 120, display: 'flex', justifyContent: 'center' }}\n          />\n        </div>\n\n        {renderForm}\n      </div>\n\n      {/* {renderTerms} */}\n\n    </div>\n  );\n}\n"],"names":["RegisterPage","_jsxs","_Fragment","children","_jsx","Helmet","JwtRegisterView","FormProvider","_ref","onSubmit","methods","Form","_objectSpread","JwtLoginView","login","useAuthContext","router","useRouter","_useState","useState","_useState2","_slicedToArray","errorMsg","_useState3","useSearchParams","email","password","emailErr","passErr","_useState4","loginState","setLoginState","enqueueSnackbar","useSnackbar","_useState5","_useState6","isSubmitting","setIsSubmitting","useBoolean","handleLogin","_asyncToGenerator","_regeneratorRuntime","mark","_callee","re","wrap","_context","prev","next","length","test","abrupt","t0","error","variant","stop","apply","arguments","useEffect","token","localStorage","getItem","constants","decrypted","decryptToken","decodedToken","jwtDecode","currentTimestamp","Math","floor","Date","now","exp","clear","alert","window","location","href","push","renderHead","Stack","spacing","sx","mb","Typography","renderForm","Alert","severity","TextField","name","label","value","onChange","e","target","helperText","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","onToggle","edge","Iconify","icon","LoadingButton","fullWidth","color","size","loading","register","setErrorMsg","searchParams","nameValue","get","emailValue","uuidValue","nameParts","split","RegisterSchema","Yup","shape","firstName","required","lastName","matches","defaultValues","confirmPassword","user","setUser","handleChange","event","_event$target","prevUser","_defineProperty","handleRegister","response","_response$data$data","uuidCode","expiryDate","expiryDateUTC","currentDate","validate","abortEarly","axios","endpoints","sent","data","PATH_AFTER_LOGIN","errors","finish","mt","backgroundColor","display","gutterBottom","borderRadius","disabled","direction","justifyContent","Link","paths","component","RouterLink","style","alignItems","flexDirection","width","height","gap","marginBottom","Box","src"],"sourceRoot":""}