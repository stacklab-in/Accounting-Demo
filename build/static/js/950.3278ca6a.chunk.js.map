{"version":3,"file":"static/js/950.3278ca6a.chunk.js","mappings":"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","sources":["sections/employee/attendance.js","pages/dashboard/employee/attendance.js","../node_modules/@mui/material/DialogTitle/DialogTitle.js"],"sourcesContent":["// @mui\r\nimport { useEffect, useState } from 'react';\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\n// components\r\nimport { useSettingsContext } from 'src/components/settings';\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, Grid, InputAdornment, InputLabel, Menu, MenuItem, Modal, Select, TextField } from '@mui/material';\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport PhoneIcon from '@mui/icons-material/Phone';\r\nimport { color, decryptToken, states } from 'src/utils/common';\r\nimport axios, { endpoints } from 'src/utils/axios';\r\nimport { constants } from 'src/utils/constant';\r\nimport { useSnackbar } from 'src/components/snackbar';\r\nimport DataTable from 'react-data-table-component';\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '70%',\r\n    bgcolor: 'background.paper',\r\n    borderRadius: '10px',\r\n    boxShadow: 24,\r\n    p: 2,\r\n    backgroundColor: '#E6F2FF',\r\n    height: '90%',\r\n    overflow: 'auto',\r\n};\r\n\r\nconst initialCustomerData = {\r\n    id: '',\r\n    name: '',\r\n    email: '',\r\n    mobileNumber: '',\r\n    type: '',\r\n    company: {\r\n        name: '',\r\n        gstNumber: '',\r\n        billingAddress: {\r\n            line1: '',\r\n            line2: '',\r\n            city: '',\r\n            state: '',\r\n            pincode: '',\r\n        },\r\n        shippingAddress: {\r\n            line1: '',\r\n            line2: '',\r\n            city: '',\r\n            state: '',\r\n            pincode: '',\r\n        },\r\n    },\r\n};\r\n\r\nconst initialCustomerErr = {\r\n    name: false,\r\n    email: false,\r\n    mobileNumber: false,\r\n    type: false,\r\n    company: {\r\n        name: false,\r\n        gstNumber: false,\r\n        billingAddress: {\r\n            line1: false,\r\n            line2: false,\r\n            city: false,\r\n            state: false,\r\n            pincode: false,\r\n        },\r\n        shippingAddress: {\r\n            line1: false,\r\n            line2: false,\r\n            city: false,\r\n            state: false,\r\n            pincode: false,\r\n        },\r\n    },\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function CustomerView() {\r\n    const settings = useSettingsContext();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    // For Modal Open\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const [customerLoading, setCustomerLoading] = useState(false);\r\n    const [customers, setCustomers] = useState([]);\r\n    const [customer, setCustomer] = useState(initialCustomerData);\r\n    const [customerErr, setCustomerErr] = useState(initialCustomerErr);\r\n    const [editUser, setEditUser] = useState(false);\r\n\r\n    // Temporary State\r\n    const [tempData, setTempData] = useState({});\r\n\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n\r\n\r\n    // For Actions Dropdown\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const openMenu = Boolean(anchorEl);\r\n\r\n\r\n    // For Delete Customer\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n        setEditUser(false);\r\n    };\r\n\r\n    const handleClose = () => setOpen(false);\r\n\r\n\r\n    const fetchData = async () => {\r\n\r\n        try {\r\n            const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n            const accessToken = decryptToken(decryptedToken);\r\n            const response = await axios.post(endpoints.customer.list, {}, {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                }\r\n            });\r\n            if (response) {\r\n                setCustomerLoading(false);\r\n                setCustomers(response.data.data);\r\n            }\r\n        } catch (err) {\r\n            enqueueSnackbar('Failed to fetch customers!', { variant: 'error' });\r\n            setCustomerLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCustomerLoading(true);\r\n        fetchData();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // You can use setFormData to update the state when user input changes\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setCustomer((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: value,\r\n        }));\r\n        \r\n    };\r\n\r\n\r\n    const handleSaveCustomer = async () => {\r\n        const newErrors = { ...initialCustomerErr };\r\n\r\n        // Example validation for each field\r\n        if (!customer.name) {\r\n            newErrors.name = true;\r\n        } else {\r\n            newErrors.name = false;\r\n        }\r\n\r\n        if (!customer.email) {\r\n            newErrors.email = true;\r\n        } else {\r\n            newErrors.email = false;\r\n        }\r\n\r\n        if (!customer.mobileNumber) {\r\n            newErrors.mobileNumber = true;\r\n        } else if (!/^[0-9]*$/.test(customer.mobileNumber) || customer.mobileNumber.length !== 10) {\r\n            newErrors.mobileNumber = true;\r\n        } else {\r\n            newErrors.mobileNumber = false;\r\n        }\r\n\r\n        if (!customer.type) {\r\n            newErrors.type = true;\r\n        } else {\r\n            newErrors.type = false;\r\n        }\r\n\r\n        // Validation for company details\r\n        if (!customer.company.name) {\r\n            newErrors.company.name = true;\r\n        } else {\r\n            newErrors.company.name = false;\r\n        }\r\n\r\n        if (!customer.company.gstNumber) {\r\n            newErrors.company.gstNumber = true;\r\n        } else if (customer.company.gstNumber.length !== 15) {\r\n            newErrors.company.gstNumber = true;\r\n        } else {\r\n            newErrors.company.gstNumber = false;\r\n        }\r\n        // Validation for billing address\r\n        const billingAddress = customer.company.billingAddress;\r\n        if (!billingAddress.line1 || !billingAddress.line2 || !billingAddress.city ||\r\n            !billingAddress.state || !billingAddress.pincode) {\r\n            // If any of the billing address fields are empty, set errors\r\n            newErrors.company.billingAddress = {\r\n                line1: !billingAddress.line1,\r\n                line2: !billingAddress.line2,\r\n                city: !billingAddress.city,\r\n                state: !billingAddress.state,\r\n                pincode: !billingAddress.pincode,\r\n            };\r\n        } else if (!/^[0-9]*$/.test(billingAddress.pincode) || billingAddress.pincode.length !== 6) {\r\n            // If pincode is not numeric, set error\r\n            newErrors.company.billingAddress.pincode = true;\r\n        } else {\r\n            // If all billing address fields are correct, clear errors\r\n            newErrors.company.billingAddress = {\r\n                line1: false,\r\n                line2: false,\r\n                city: false,\r\n                state: false,\r\n                pincode: false,\r\n            };\r\n        };\r\n\r\n        // Validation for shipping address\r\n        const shippingAddress = customer.company.shippingAddress;\r\n        if (!shippingAddress.line1 || !shippingAddress.line2 || !shippingAddress.city ||\r\n            !shippingAddress.state || !shippingAddress.pincode) {\r\n            // If any of the shipping address fields are empty, set errors\r\n            newErrors.company.shippingAddress = {\r\n                line1: !shippingAddress.line1,\r\n                line2: !shippingAddress.line2,\r\n                city: !shippingAddress.city,\r\n                state: !shippingAddress.state,\r\n                pincode: !shippingAddress.pincode,\r\n            };\r\n        } else if (!/^[0-9]*$/.test(shippingAddress.pincode) || shippingAddress.pincode.length !== 6) {\r\n            // If pincode is not numeric, set error\r\n            newErrors.company.shippingAddress.pincode = true;\r\n        } else {\r\n            // If all shipping address fields are correct, clear errors\r\n            newErrors.company.shippingAddress = {\r\n                line1: false,\r\n                line2: false,\r\n                city: false,\r\n                state: false,\r\n                pincode: false,\r\n            };\r\n        }\r\n\r\n\r\n        // Check if there are any errors\r\n        if (Object.values(newErrors).some((field) => field === true) ||\r\n            Object.values(newErrors.company.billingAddress).some((field) => field === true) ||\r\n            Object.values(newErrors.company.shippingAddress).some((field) => field === true) ||\r\n            newErrors.company.name || newErrors.company.gstNumber\r\n        ) {\r\n            // If there are errors, set the error state\r\n            setCustomerErr(newErrors);\r\n            return;\r\n        };\r\n        // If no errors, proceed with saving\r\n        const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n        const accessToken = decryptToken(decryptedToken);\r\n        axios.post(endpoints.customer.add, customer,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                }\r\n            })\r\n            .then((res) => {\r\n                enqueueSnackbar('Customer created successfully!', { variant: 'success' });\r\n                // fetchData();\r\n                handleClose();\r\n                // Reset the error state\r\n                setCustomerErr(initialCustomerErr);\r\n\r\n                // Reset the customer  state\r\n                setCustomer(initialCustomerData);\r\n\r\n                fetchData();\r\n            }).catch((err) => {\r\n                enqueueSnackbar(err.error || err.msg, { variant: 'error' });\r\n            })\r\n    };\r\n\r\n    const handleEditDetails = () => {\r\n        setEditUser(true);\r\n        setAnchorEl(null);\r\n        const customerData = {\r\n            id: tempData._id,\r\n            name: tempData.name,\r\n            email: tempData.email,\r\n            mobileNumber: tempData.mobileNumber.slice(3),\r\n            type: tempData.type,\r\n            company: {\r\n                name: tempData.company.name,\r\n                gstNumber: tempData.company.gstNumber,\r\n                billingAddress: {\r\n                    line1: tempData.company.billingAddress.line1,\r\n                    line2: tempData.company.billingAddress.line2,\r\n                    city: tempData.company.billingAddress.city,\r\n                    state: tempData.company.billingAddress.state,\r\n                    pincode: tempData.company.billingAddress.pincode,\r\n                },\r\n                shippingAddress: {\r\n                    line1: tempData.company.shippingAddress.line1,\r\n                    line2: tempData.company.shippingAddress.line2,\r\n                    city: tempData.company.shippingAddress.city,\r\n                    state: tempData.company.shippingAddress.state,\r\n                    pincode: tempData.company.shippingAddress.pincode,\r\n                },\r\n            },\r\n        };\r\n\r\n        setCustomer(customerData);\r\n        setOpen(true);\r\n\r\n    };\r\n\r\n    const handleDeleteDetails = () => {\r\n        setCustomer((prev) => ({ ...prev, id: tempData._id }));\r\n        setOpenDialog(true);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleConfirmDelete = () => {\r\n\r\n        const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n        const accessToken = decryptToken(decryptedToken);\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        };\r\n        axios.post(endpoints.customer.delete, { id: customer.id }, config)\r\n            .then((res) => {\r\n                if (res) {\r\n                    enqueueSnackbar('Customer deleted successfully!', { variant: 'success' });\r\n                    setOpenDialog(false);\r\n                    setCustomer(initialCustomerData);\r\n                    fetchData();\r\n                };\r\n            }).catch((err) => {\r\n                enqueueSnackbar(err.msg || err.error, { variant: 'error' });\r\n            })\r\n    };\r\n\r\n    const handleUpdateCustomer = async () => {\r\n        const newErrors = { ...initialCustomerErr };\r\n\r\n        // Example validation for each field\r\n        if (!customer.name) {\r\n            newErrors.name = true;\r\n        }\r\n\r\n        if (!customer.email) {\r\n            newErrors.email = true;\r\n        }\r\n\r\n        if (!customer.mobileNumber) {\r\n            newErrors.mobileNumber = true;\r\n        }\r\n\r\n        if (!customer.type) {\r\n            newErrors.type = true;\r\n        }\r\n\r\n        // Validation for company details\r\n        if (!customer.company.name) {\r\n            newErrors.company.name = true;\r\n        }\r\n\r\n        if (!customer.company.gstNumber) {\r\n            newErrors.company.gstNumber = true;\r\n        }\r\n\r\n        // Validation for billing address\r\n        if (!customer.company.billingAddress.line1) {\r\n            newErrors.company.billingAddress.line1 = true;\r\n        }\r\n\r\n        if (!customer.company.billingAddress.line2) {\r\n            newErrors.company.billingAddress.line2 = true;\r\n        }\r\n\r\n        if (!customer.company.billingAddress.city) {\r\n            newErrors.company.billingAddress.city = true;\r\n        }\r\n\r\n        if (!customer.company.billingAddress.state) {\r\n            newErrors.company.billingAddress.state = true;\r\n        }\r\n\r\n        if (!customer.company.billingAddress.pincode) {\r\n            newErrors.company.billingAddress.pincode = true;\r\n        }\r\n\r\n        // Validation for shipping address\r\n        if (!customer.company.shippingAddress.line1) {\r\n            newErrors.company.shippingAddress.line1 = true;\r\n        }\r\n\r\n        if (!customer.company.shippingAddress.line2) {\r\n            newErrors.company.shippingAddress.line2 = true;\r\n        }\r\n\r\n        if (!customer.company.shippingAddress.city) {\r\n            newErrors.company.shippingAddress.city = true;\r\n        }\r\n\r\n        if (!customer.company.shippingAddress.state) {\r\n            newErrors.company.shippingAddress.state = true;\r\n        }\r\n\r\n        if (!customer.company.shippingAddress.pincode) {\r\n            newErrors.company.shippingAddress.pincode = true;\r\n        }\r\n\r\n        // Check if there are any errors\r\n        if (Object.values(newErrors).some((field) => field === true)) {\r\n            // If there are errors, set the error state\r\n            setCustomerErr(newErrors);\r\n        } else {\r\n            // If no errors, proceed with saving\r\n\r\n            const decryptedToken = localStorage.getItem(constants.keyUserToken);\r\n            const accessToken = decryptToken(decryptedToken);\r\n            axios.post(endpoints.customer.update, customer,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${accessToken}`,\r\n                    }\r\n                })\r\n                .then((res) => {\r\n                    enqueueSnackbar('Customer updated successfully!', { variant: 'success' });\r\n                    // fetchData();\r\n                    handleClose();\r\n                    // Reset the error state\r\n                    setCustomerErr(initialCustomerErr);\r\n\r\n                    // Reset the customer  state\r\n                    setCustomer(initialCustomerData);\r\n\r\n                    fetchData();\r\n                }).catch((err) => {\r\n                    enqueueSnackbar(err.error || err.msg, { variant: 'error' });\r\n                })\r\n\r\n\r\n\r\n        }\r\n    };\r\n\r\n    const customerColumns = [\r\n        {\r\n            name: 'Name',\r\n            selector: row => row.name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Company Name',\r\n            selector: row => row.company.name,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Email Address',\r\n            selector: row => row.email,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Contact Number',\r\n            selector: row => row.mobileNumber,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'GST Number',\r\n            selector: row => row.company.gstNumber,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Actions',\r\n            cell: (row) => (\r\n                <>\r\n                    <Button onClick={(event) => {\r\n                        setAnchorEl(event.currentTarget);\r\n                        setTempData(row)\r\n                    }} style={{ color: color.actionButton }} variant='outlined' endIcon={<ArrowDropDownIcon />}>Action</Button>\r\n                    <Menu\r\n                        id=\"basic-menu\"\r\n                        anchorEl={anchorEl}\r\n                        open={openMenu}\r\n                        onClose={() => {\r\n                            setAnchorEl(null);\r\n                            setTempData({});\r\n                        }}\r\n                        MenuListProps={{\r\n                            'aria-labelledby': 'basic-button',\r\n                        }}\r\n                    >\r\n                        <MenuItem onClick={() => handleEditDetails()}>Edit Details</MenuItem>\r\n                        <MenuItem onClick={() => handleDeleteDetails()}>Remove</MenuItem>\r\n                    </Menu>\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const filteredCustomers = customers.filter((custData) =>\r\n        custData?.name?.toLowerCase().includes(searchQuery?.toLowerCase())\r\n    );\r\n\r\n    return (\r\n        <Container maxWidth={settings.themeStretch ? false : 'xl'}>\r\n            <Typography variant=\"h4\"> Employee Attendance </Typography>\r\n\r\n            {/* <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: '20px' }}>\r\n                <TextField\r\n                    size=\"small\"\r\n                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <SearchIcon />\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                <Button startIcon={<AddIcon />} color='primary' variant='contained' onClick={handleOpen}>\r\n                    ADD CUSTOMER\r\n                </Button>\r\n            </div> */}\r\n\r\n            {/* <Modal\r\n                open={open}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n\r\n                        <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                            Basic Details\r\n                        </Typography>\r\n                        <div style={{ padding: \"10px\", backgroundColor: 'white', borderRadius: '10px' }}>\r\n                            <Grid container spacing={2} >\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label='Name'\r\n                                        name='name'\r\n                                        value={customer.name}\r\n                                        onChange={handleChange}\r\n                                        error={customerErr.name}\r\n                                        helperText={customerErr.name ? 'Invalid customer name!..' : null}\r\n                                        fullWidth\r\n                                        required />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label='Email'\r\n                                        name='email'\r\n                                        value={customer.email}\r\n                                        onChange={handleChange}\r\n                                        error={customerErr.email}\r\n                                        helperText={customerErr.email ? 'Invalid customer email!..' : null}\r\n                                        fullWidth\r\n                                        required />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label=\"Mobile Number\"\r\n                                        name=\"mobileNumber\"\r\n                                        value={customer.mobileNumber}\r\n                                        onChange={handleChange}\r\n                                        error={customerErr.mobileNumber}\r\n                                        helperText={customerErr.mobileNumber ? 'Invalid customer mobile number!..' : null}\r\n                                        fullWidth\r\n                                        required\r\n                                        inputProps={{\r\n                                            maxLength: 10,\r\n                                        }}\r\n                                        InputProps={{\r\n                                            startAdornment: (\r\n                                                <InputAdornment position=\"start\">\r\n                                                    <PhoneIcon /> +91\r\n                                                </InputAdornment>\r\n                                            )\r\n                                        }}\r\n                                    />\r\n\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <InputLabel id=\"demo-simple-select-label\">Type</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"demo-simple-select-label\"\r\n                                            id=\"demo-simple-select\"\r\n                                            value={customer.type}\r\n                                            label=\"Type\"\r\n                                            name='type'\r\n                                            onChange={handleChange}\r\n                                            error={customerErr.type}\r\n                                        >\r\n                                            <MenuItem value='TAXABLE'>Taxable</MenuItem>\r\n                                            <MenuItem value='EXEMPTED'>Exempted</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </div>\r\n                        <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">\r\n                            Company Details\r\n                        </Typography>\r\n\r\n                        <div style={{ padding: \"10px\", backgroundColor: 'white', borderRadius: '10px' }}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label='Company Name'\r\n                                        fullWidth\r\n                                        value={customer.company.name}\r\n                                        error={customerErr.company.name}\r\n                                        helperText={customerErr.company.name ? 'Invalid company name!..' : null}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.name = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    name: false\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label='GST Number'\r\n                                        fullWidth\r\n                                        error={customerErr.company.gstNumber}\r\n                                        helperText={customerErr.company.gstNumber ? 'Invalid company name!..' : null}\r\n                                        value={customer.company.gstNumber}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.gstNumber = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    gstNumber: false\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        inputProps={{\r\n                                            maxLength: 15,\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </div>\r\n\r\n\r\n                        <div style={{ padding: \"10px\", backgroundColor: 'white', borderRadius: '10px' }}>\r\n                            <Grid container spacing={2} >\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='h6'>Billing Address</Typography>\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='Address Line 1'\r\n                                        error={customerErr.company.billingAddress.line1}\r\n                                        helperText={customerErr.company.billingAddress.line1 ? 'Invalid line1 address!..' : null}\r\n                                        value={customer.company.billingAddress.line1}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.billingAddress.line1 = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    billingAddress: {\r\n                                                        ...prev.company.billingAddress,\r\n                                                        line1: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='Address Line 2'\r\n                                        error={customerErr.company.billingAddress.line2}\r\n                                        helperText={customerErr.company.billingAddress.line2 ? 'Invalid line2 address!..' : null}\r\n                                        value={customer.company.billingAddress.line2}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.billingAddress.line2 = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    billingAddress: {\r\n                                                        ...prev.company.billingAddress,\r\n                                                        line2: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='City'\r\n                                        error={customerErr.company.billingAddress.city}\r\n                                        helperText={customerErr.company.billingAddress.city ? 'Invalid city name!..' : null}\r\n                                        value={customer.company.billingAddress.city}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.billingAddress.city = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    billingAddress: {\r\n                                                        ...prev.company.billingAddress,\r\n                                                        city: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <InputLabel id=\"demo-simple-select-label\">Select State</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"demo-simple-select-label\"\r\n                                            error={customerErr.company.billingAddress.state}\r\n                                            id=\"demo-simple-select\"\r\n                                            value={customer.company.billingAddress.state}\r\n                                            onChange={(e) => {\r\n                                                const prevCustomer = { ...customer };\r\n                                                customer.company.billingAddress.state = e.target.value;\r\n                                                setCustomer(prevCustomer);\r\n                                                setCustomerErr((prev) => ({\r\n                                                    ...prev, company: {\r\n                                                        ...prev.company,\r\n                                                        billingAddress: {\r\n                                                            ...prev.company.billingAddress,\r\n                                                            state: false\r\n                                                        }\r\n                                                    }\r\n                                                }))\r\n                                            }}\r\n                                            label=\"Select State\"\r\n                                        >\r\n                                            {\r\n                                                states.map((state, index) => (\r\n                                                    <MenuItem key={index} value={state}>{state}</MenuItem>\r\n                                                ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label=\"Pincode\"\r\n                                        name=\"pincode\"\r\n                                        value={customer.company.billingAddress.pincode}\r\n                                        error={customerErr.company.billingAddress.pincode}\r\n                                        helperText={customerErr.company.billingAddress.pincode ? 'Invalid pincode!..' : null}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.billingAddress.pincode = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    billingAddress: {\r\n                                                        ...prev.company.billingAddress,\r\n                                                        pincode: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }\r\n                                        }\r\n                                        fullWidth\r\n                                        required\r\n                                        inputProps={{\r\n                                            maxLength: 6, // Set maximum length to 4 characters\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                        <div style={{ padding: \"10px\", backgroundColor: 'white', borderRadius: '10px' }}>\r\n                            <Grid container spacing={2} >\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant='h6'>Shipping Address</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='Address Line 1'\r\n                                        error={customerErr.company.shippingAddress.line1}\r\n                                        helperText={customerErr.company.shippingAddress.line1 ? 'Invalid line1 address!..' : null}\r\n                                        value={customer.company.shippingAddress.line1}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.shippingAddress.line1 = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    shippingAddress: {\r\n                                                        ...prev.company.shippingAddress,\r\n                                                        line1: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='Address Line 2'\r\n                                        error={customerErr.company.shippingAddress.line2}\r\n                                        helperText={customerErr.company.shippingAddress.line2 ? 'Invalid line2 address!..' : null}\r\n                                        value={customer.company.shippingAddress.line2}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.shippingAddress.line2 = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    shippingAddress: {\r\n                                                        ...prev.company.shippingAddress,\r\n                                                        line2: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField label='City'\r\n                                        error={customerErr.company.shippingAddress.city}\r\n                                        helperText={customerErr.company.shippingAddress.city ? 'Invalid city name!..' : null}\r\n                                        value={customer.company.shippingAddress.city}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.shippingAddress.city = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    shippingAddress: {\r\n                                                        ...prev.company.shippingAddress,\r\n                                                        city: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }}\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <InputLabel id=\"demo-simple-select-label\">Select State</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"demo-simple-select-label\"\r\n                                            error={customerErr.company.shippingAddress.state}\r\n                                            id=\"demo-simple-select\"\r\n                                            value={customer.company.shippingAddress.state}\r\n                                            onChange={(e) => {\r\n                                                const prevCustomer = { ...customer };\r\n                                                customer.company.shippingAddress.state = e.target.value;\r\n                                                setCustomer(prevCustomer);\r\n                                                setCustomerErr((prev) => ({\r\n                                                    ...prev, company: {\r\n                                                        ...prev.company,\r\n                                                        shippingAddress: {\r\n                                                            ...prev.company.shippingAddress,\r\n                                                            state: false\r\n                                                        }\r\n                                                    }\r\n                                                }))\r\n                                            }}\r\n                                            label=\"Select State\"\r\n                                        >\r\n                                            {\r\n                                                states.map((state, index) => (\r\n                                                    <MenuItem key={index} value={state}>{state}</MenuItem>\r\n                                                ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label=\"Pincode\"\r\n                                        name=\"pincode\"\r\n                                        value={customer.company.shippingAddress.pincode}\r\n                                        error={customerErr.company.shippingAddress.pincode}\r\n                                        helperText={customerErr.company.shippingAddress.pincode ? 'Invalid pincode!..' : null}\r\n                                        onChange={(e) => {\r\n                                            const prevCustomer = { ...customer };\r\n                                            customer.company.shippingAddress.pincode = e.target.value;\r\n                                            setCustomer(prevCustomer);\r\n                                            setCustomerErr((prev) => ({\r\n                                                ...prev, company: {\r\n                                                    ...prev.company,\r\n                                                    shippingAddress: {\r\n                                                        ...prev.company.shippingAddress,\r\n                                                        pincode: false\r\n                                                    }\r\n                                                }\r\n                                            }))\r\n                                        }\r\n                                        }\r\n                                        fullWidth\r\n                                        required\r\n                                        inputProps={{\r\n                                            maxLength: 6, // Set maximum length to 4 characters\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                    <div style={{ display: 'flex', flexDirection: 'row', gap: '10px', justifyContent: 'flex-end', padding: \"10px\" }}>\r\n                        <Button variant='contained' color='primary' onClick={editUser ? handleUpdateCustomer : handleSaveCustomer}>\r\n                            {editUser ? 'Update' : 'Save'}\r\n                        </Button>\r\n                        <Button variant='outlined' onClick={() => {\r\n                            setCustomerErr(initialCustomerErr);\r\n                            if (editUser) {\r\n                                setCustomer(initialCustomerData);\r\n                                setEditUser(false);\r\n                            };\r\n                            setOpen(false);\r\n                            setTempData({});\r\n                        }}>\r\n                            Cancel\r\n                        </Button>\r\n                    </div>\r\n                </Box>\r\n\r\n            </Modal>\r\n\r\n            <div style={{ marginTop: \"20px\" }}>\r\n                <DataTable\r\n                    columns={customerColumns}\r\n                    data={filteredCustomers}\r\n                    pagination\r\n                    progressPending={customerLoading}\r\n                />\r\n            </div> */}\r\n\r\n\r\n            {/* Dialog For Delete */}\r\n            <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>\r\n                <DialogTitle>Remove Customer</DialogTitle>\r\n                <DialogContent>\r\n                    Are you sure you want to delete this customer?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setOpenDialog(false)}>Cancel</Button>\r\n                    <Button onClick={handleConfirmDelete} variant=\"contained\" color=\"error\">\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </Container>\r\n    );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport EmployeeAttendanceView from 'src/sections/employee/attendance';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Page() {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title> Dashboard : Employee Attendance</title>\r\n            </Helmet>\r\n\r\n            <EmployeeAttendanceView />\r\n        </>\r\n    );\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n  const {\n      className,\n      id: idProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: idProp != null ? idProp : titleId\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;"],"names":["initialCustomerData","id","name","email","mobileNumber","type","company","gstNumber","billingAddress","line1","line2","city","state","pincode","shippingAddress","initialCustomerErr","CustomerView","settings","useSettingsContext","enqueueSnackbar","useSnackbar","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","setCustomerLoading","_useState5","_useState6","customers","setCustomers","_useState7","_useState8","customer","setCustomer","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","_useState15","_useState16","searchQuery","_useState17","_useState18","anchorEl","_useState19","Boolean","_useState20","openDialog","setOpenDialog","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","decryptedToken","accessToken","response","wrap","_context","prev","next","localStorage","getItem","constants","decryptToken","axios","endpoints","headers","Authorization","concat","sent","data","t0","variant","stop","apply","arguments","useEffect","filter","custData","_custData$name","toLowerCase","includes","_jsxs","Container","maxWidth","themeStretch","children","_jsx","Typography","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","Button","onClick","config","then","res","catch","err","msg","error","color","Page","_Fragment","Helmet","EmployeeAttendanceView","_excluded","DialogTitleRoot","styled","slot","overridesResolver","props","styles","root","padding","flex","React","inProps","ref","useThemeProps","className","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","_React$useContext$tit","DialogContext","titleId","_extends","component","clsx"],"sourceRoot":""}